/**
 * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.
 *
 * Website : -> http://www.turbocommons.org
 * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.
 * License Url : -> http://www.apache.org/licenses/LICENSE-2.0
 * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vall√®s, Barcelona). http://www.edertone.com
 */
/**
 * Common operations and tools related with numbers
 */
export declare class NumericUtils {
    /**
     * Tells if the given value is numeric or not
     *
     * @param value A value to check
     *
     * @return true if the given value is numeric or represents a numeric value, false otherwise
     */
    static isNumeric(value: any): boolean;
    /**
     * Tells if the given value is a numeric integer or not
     *
     * @param value A value to check
     *
     * @return true if the given value is a numeric integer or represents a a numeric integer value, false otherwise
     */
    static isInteger(value: any): boolean;
    /**
     * Strictly check that the provided value is numeric or throw an exception
     *
     * @param value A value to check
     * @param valueName The name of the value to be shown at the beginning of the exception message
     * @param errorMessage The rest of the exception message
     *
     * @throws Error If the check fails
     *
     * @return void
     */
    static forceNumeric(value: any, valueName?: string, errorMessage?: string): void;
    /**
     * Strictly check that the provided value is a positive integer or throw an exception
     *
     * @param value A value to check
     * @param valueName The name of the value to be shown at the beginning of the exception message
     * @param errorMessage The rest of the exception message
     *
     * @throws Error If the check fails
     *
     * @return void
     */
    static forcePositiveInteger(value: any, valueName?: string, errorMessage?: string): void;
    /**
     * Get the number represented by the given value
     *
     * @param value A value to convert to a number
     *
     * @return number The numeric type representation from the given value. For example, a string '0001' will return 1
     */
    static getNumeric(value: any): number;
    /**
     * Generate a random integer between the specified range (both extremes are included).
     *
     * @param min lowest possible value (negative values are allowed)
     * @param max highest possible value (negative values are allowed)
     *
     * @throws Exception if max is equal or less than min.
     *
     * @return A random integer value between min and max
     */
    static generateRandomInteger(min: number, max: number): number;
}
