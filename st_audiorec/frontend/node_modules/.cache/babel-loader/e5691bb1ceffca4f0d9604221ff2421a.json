{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\n\nexport function toDOMStream(source, options) {\n  if (isAsyncIterable(source)) {\n    return asyncIterableAsReadableDOMStream(source, options);\n  }\n\n  if (isIterable(source)) {\n    return iterableAsReadableDOMStream(source, options);\n  }\n  /* istanbul ignore next */\n\n\n  throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n/** @ignore */\n\nfunction iterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({ ...options,\n\n    start(controller) {\n      next(controller, it || (it = source[Symbol.iterator]()));\n    },\n\n    pull(controller) {\n      it ? next(controller, it) : controller.close();\n    },\n\n    cancel() {\n      (it && it.return && it.return() || true) && (it = null);\n    }\n\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n\n  function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n\n    while (!(r = it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n\n      controller.enqueue(r.value);\n\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}\n/** @ignore */\n\n\nfunction asyncIterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({ ...options,\n\n    async start(controller) {\n      await next(controller, it || (it = source[Symbol.asyncIterator]()));\n    },\n\n    async pull(controller) {\n      it ? await next(controller, it) : controller.close();\n    },\n\n    async cancel() {\n      (it && it.return && (await it.return()) || true) && (it = null);\n    }\n\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n\n  async function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n\n    while (!(r = await it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n\n      controller.enqueue(r.value);\n\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n\n    controller.close();\n  }\n}","map":{"version":3,"mappings":"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","names":["toUint8Array","isIterable","isAsyncIterable","toDOMStream","source","options","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","Error","it","bm","type","hwm","highWaterMark","ReadableStream","start","controller","next","Symbol","iterator","pull","close","cancel","return","undefined","buf","r","size","desiredSize","done","ArrayBuffer","isView","value","byteLength","enqueue","asyncIterator"],"sources":["io/whatwg/iterable.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}