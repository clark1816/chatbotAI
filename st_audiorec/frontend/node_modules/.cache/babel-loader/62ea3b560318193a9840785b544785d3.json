{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\n/** @ignore */\n\nclass Footer_ {\n  constructor(schema) {\n    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n    let recordBatches = arguments.length > 2 ? arguments[2] : undefined;\n    let dictionaryBatches = arguments.length > 3 ? arguments[3] : undefined;\n    this.schema = schema;\n    this.version = version;\n    recordBatches && (this._recordBatches = recordBatches);\n    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n  }\n  /** @nocollapse */\n\n\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n\n    const footer = _Footer.getRootAsFooter(buf);\n\n    const schema = Schema.decode(footer.schema());\n    return new OffHeapFooter(schema, footer);\n  }\n  /** @nocollapse */\n\n\n  static encode(footer) {\n    const b = new Builder();\n    const schemaOffset = Schema.encode(b, footer.schema);\n\n    _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n\n    [...footer.recordBatches()].slice().reverse().forEach(rb => FileBlock.encode(b, rb));\n    const recordBatchesOffset = b.endVector();\n\n    _Footer.startDictionariesVector(b, footer.numDictionaries);\n\n    [...footer.dictionaryBatches()].slice().reverse().forEach(db => FileBlock.encode(b, db));\n    const dictionaryBatchesOffset = b.endVector();\n\n    _Footer.startFooter(b);\n\n    _Footer.addSchema(b, schemaOffset);\n\n    _Footer.addVersion(b, MetadataVersion.V4);\n\n    _Footer.addRecordBatches(b, recordBatchesOffset);\n\n    _Footer.addDictionaries(b, dictionaryBatchesOffset);\n\n    _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n    return b.asUint8Array();\n  }\n\n  get numRecordBatches() {\n    return this._recordBatches.length;\n  }\n\n  get numDictionaries() {\n    return this._dictionaryBatches.length;\n  }\n\n  *recordBatches() {\n    for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n      if (block = this.getRecordBatch(i)) {\n        yield block;\n      }\n    }\n  }\n\n  *dictionaryBatches() {\n    for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n      if (block = this.getDictionaryBatch(i)) {\n        yield block;\n      }\n    }\n  }\n\n  getRecordBatch(index) {\n    return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;\n  }\n\n  getDictionaryBatch(index) {\n    return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;\n  }\n\n}\n\nexport { Footer_ as Footer };\n/** @ignore */\n\nclass OffHeapFooter extends Footer_ {\n  constructor(schema, _footer) {\n    super(schema, _footer.version());\n    this._footer = _footer;\n  }\n\n  get numRecordBatches() {\n    return this._footer.recordBatchesLength();\n  }\n\n  get numDictionaries() {\n    return this._footer.dictionariesLength();\n  }\n\n  getRecordBatch(index) {\n    if (index >= 0 && index < this.numRecordBatches) {\n      const fileBlock = this._footer.recordBatches(index);\n\n      if (fileBlock) {\n        return FileBlock.decode(fileBlock);\n      }\n    }\n\n    return null;\n  }\n\n  getDictionaryBatch(index) {\n    if (index >= 0 && index < this.numDictionaries) {\n      const fileBlock = this._footer.dictionaries(index);\n\n      if (fileBlock) {\n        return FileBlock.decode(fileBlock);\n      }\n    }\n\n    return null;\n  }\n\n}\n/** @ignore */\n\n\nexport class FileBlock {\n  /** @nocollapse */\n  static decode(block) {\n    return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n  }\n  /** @nocollapse */\n\n\n  static encode(b, fileBlock) {\n    const {\n      metaDataLength\n    } = fileBlock;\n    const offset = new Long(fileBlock.offset, 0);\n    const bodyLength = new Long(fileBlock.bodyLength, 0);\n    return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n  }\n\n  constructor(metaDataLength, bodyLength, offset) {\n    this.metaDataLength = metaDataLength;\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["File_","flatbuffers","Long","Builder","ByteBuffer","_Block","org","apache","arrow","flatbuf","Block","_Footer","Footer","Schema","MetadataVersion","toUint8Array","Footer_","constructor","schema","version","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","decode","buf","footer","getRootAsFooter","OffHeapFooter","encode","b","schemaOffset","startRecordBatchesVector","numRecordBatches","slice","reverse","forEach","rb","FileBlock","recordBatchesOffset","endVector","startDictionariesVector","numDictionaries","db","dictionaryBatchesOffset","startFooter","addSchema","addVersion","addRecordBatches","addDictionaries","finishFooterBuffer","endFooter","asUint8Array","length","block","i","n","getRecordBatch","getDictionaryBatch","index","_footer","recordBatchesLength","dictionariesLength","fileBlock","dictionaries","metaDataLength","bodyLength","offset","createBlock","low"],"sources":["ipc/metadata/file.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}