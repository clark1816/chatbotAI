{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\n\nconst SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\n\nfunction collapseContiguousByteRanges(chunks) {\n  let result = chunks[0] ? [chunks[0]] : [];\n  let xOffset, yOffset, xLen, yLen;\n\n  for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i]; // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    ({\n      byteOffset: xOffset,\n      byteLength: xLen\n    } = x);\n    ({\n      byteOffset: yOffset,\n      byteLength: yLen\n    } = y); // continue if the byte ranges of x and y aren't contiguous\n\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n\n  return result;\n}\n/** @ignore */\n\n\nexport function memcpy(target, source) {\n  let targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  const targetByteLength = target.byteLength;\n  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\n\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  let result = collapseContiguousByteRanges(chunks);\n  let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n  let source, sliced, buffer;\n  let offset = 0,\n      index = -1,\n      length = Math.min(size || Infinity, byteLength);\n\n  for (let n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  let value = isIteratorResult(input) ? input.value : input;\n\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n\n    return value;\n  }\n\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\n\nexport const toInt8Array = input => toArrayBufferView(Int8Array, input);\n/** @ignore */\n\nexport const toInt16Array = input => toArrayBufferView(Int16Array, input);\n/** @ignore */\n\nexport const toInt32Array = input => toArrayBufferView(Int32Array, input);\n/** @ignore */\n\nexport const toBigInt64Array = input => toArrayBufferView(BigInt64Array, input);\n/** @ignore */\n\nexport const toUint8Array = input => toArrayBufferView(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16Array = input => toArrayBufferView(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32Array = input => toArrayBufferView(Uint32Array, input);\n/** @ignore */\n\nexport const toBigUint64Array = input => toArrayBufferView(BigUint64Array, input);\n/** @ignore */\n\nexport const toFloat32Array = input => toArrayBufferView(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64Array = input => toArrayBufferView(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArray = input => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\n\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\n\n\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n  const wrap = function* (x) {\n    yield x;\n  };\n\n  const buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n  yield* pump(function* (it) {\n    let r = null;\n\n    do {\n      r = it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.iterator]()));\n}\n/** @ignore */\n\nexport const toInt8ArrayIterator = input => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */\n\nexport const toInt16ArrayIterator = input => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */\n\nexport const toInt32ArrayIterator = input => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */\n\nexport const toUint8ArrayIterator = input => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16ArrayIterator = input => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32ArrayIterator = input => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */\n\nexport const toFloat32ArrayIterator = input => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64ArrayIterator = input => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArrayIterator = input => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\n\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n  // if a Promise, unwrap the Promise and iterate the resolved value\n  if (isPromise(source)) {\n    return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n  }\n\n  const wrap = async function* (x) {\n    yield await x;\n  };\n\n  const emit = async function* (source) {\n    yield* pump(function* (it) {\n      let r = null;\n\n      do {\n        r = it.next(yield r && r.value);\n      } while (!r.done);\n    }(source[Symbol.iterator]()));\n  };\n\n  const buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n  : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n  : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n  : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n  : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n  : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n  : source; // otherwise if AsyncIterable, use it\n\n  yield* pump(async function* (it) {\n    let r = null;\n\n    do {\n      r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */\n\nexport const toInt8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */\n\nexport const toInt16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */\n\nexport const toInt32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */\n\nexport const toUint8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */\n\nexport const toUint16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */\n\nexport const toUint32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */\n\nexport const toFloat32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */\n\nexport const toFloat64ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */\n\nexport const toUint8ClampedArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\n\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n\n    for (let i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n\n  return valueOffsets;\n}\n/** @ignore */\n\nexport function compareArrayLike(a, b) {\n  let i = 0,\n      n = a.length;\n\n  if (n !== b.length) {\n    return false;\n  }\n\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n\n  return true;\n}","map":{"version":3,"mappings":"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","names":["flatbuffers","encodeUtf8","ByteBuffer","isPromise","isIterable","isAsyncIterable","isIteratorResult","BigInt64Array","BigUint64Array","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","collapseContiguousByteRanges","chunks","result","xOffset","yOffset","xLen","yLen","x","y","i","j","n","length","buffer","byteOffset","byteLength","Uint8Array","memcpy","target","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","min","set","joinUint8Arrays","size","reduce","b","sliced","offset","index","Infinity","subarray","slice","toArrayBufferView","ArrayBufferViewCtor","input","value","bytes","isView","from","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","Int32Array","toBigInt64Array","toUint8Array","toUint16Array","Uint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","Float32Array","toFloat64Array","Float64Array","toUint8ClampedArray","Uint8ClampedArray","pump","iterator","next","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","r","done","Symbol","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","emit","asyncIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","a"],"sources":["util/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}