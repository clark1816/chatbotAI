{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class Utf8Builder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._values = new BufferBuilder(new Uint8Array(0));\n  }\n\n  get byteLength() {\n    let size = this._pendingLength + this.length * 4;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    return size;\n  }\n\n  setValue(index, value) {\n    return super.setValue(index, encodeUtf8(value));\n  } // @ts-ignore\n\n\n  _flushPending(pending, pendingLength) {}\n\n}\nUtf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,oBAAT,QAAqD,YAArD;AAEA;;AACA,OAAM,MAAOC,WAAP,SAAwCD,oBAAxC,CAAyE;AAC3EE,cAAYC,IAAZ,EAA6C;AACzC,UAAMA,IAAN;AACA,SAAKC,OAAL,GAAe,IAAIL,aAAJ,CAAkB,IAAIM,UAAJ,CAAe,CAAf,CAAlB,CAAf;AACH;;AACoB,MAAVC,UAAU;AACjB,QAAIC,IAAI,GAAG,KAAKC,cAAL,GAAuB,KAAKC,MAAL,GAAc,CAAhD;AACA,SAAKC,QAAL,KAAkBH,IAAI,IAAI,KAAKG,QAAL,CAAcJ,UAAxC;AACA,SAAKF,OAAL,KAAiBG,IAAI,IAAI,KAAKH,OAAL,CAAaE,UAAtC;AACA,SAAKK,MAAL,KAAgBJ,IAAI,IAAI,KAAKI,MAAL,CAAYL,UAApC;AACA,WAAOC,IAAP;AACH;;AACMK,UAAQ,CAACC,KAAD,EAAgBC,KAAhB,EAA6B;AACxC,WAAO,MAAMF,QAAN,CAAeC,KAAf,EAAsBhB,UAAU,CAACiB,KAAD,CAAhC,CAAP;AACH,GAd0E,CAe3E;;;AACUC,eAAa,CAACC,OAAD,EAA+CC,aAA/C,EAAoE,CAAU;;AAhB1B;AAmB9EhB,WAAW,CAACiB,SAAZ,CAA8BH,aAA9B,GAA+CjB,aAAa,CAACoB,SAAd,CAAgCH,aAA/E","names":["encodeUtf8","BinaryBuilder","BufferBuilder","VariableWidthBuilder","Utf8Builder","constructor","opts","_values","Uint8Array","byteLength","size","_pendingLength","length","_offsets","_nulls","setValue","index","value","_flushPending","pending","pendingLength","prototype"],"sources":["builder/utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n"]},"metadata":{},"sourceType":"module"}