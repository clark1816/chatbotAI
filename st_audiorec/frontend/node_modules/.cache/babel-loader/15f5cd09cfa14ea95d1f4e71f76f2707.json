{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { Dictionary } from '../type';\n/** @ignore */\n\nexport class DictionaryVector extends BaseVector {\n  constructor(data) {\n    super(data);\n    this.indices = Vector.new(data.clone(this.type.indices));\n  }\n  /** @nocollapse */\n\n\n  static from() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 3) {\n      const [values, indices, keys] = args;\n      const type = new Dictionary(values.type, indices, null, null);\n      return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n    }\n\n    return vectorFromValuesWithType(() => args[0].type, args[0]);\n  }\n\n  get dictionary() {\n    return this.data.dictionary;\n  }\n\n  reverseLookup(value) {\n    return this.dictionary.indexOf(value);\n  }\n\n  getKey(idx) {\n    return this.indices.get(idx);\n  }\n\n  getValue(key) {\n    return this.dictionary.get(key);\n  }\n\n  setKey(idx, key) {\n    return this.indices.set(idx, key);\n  }\n\n  setValue(key, value) {\n    return this.dictionary.set(key, value);\n  }\n\n}\nDictionaryVector.prototype.indices = null;","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,QAAqB,SAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAGA,SAASC,wBAAT,QAAyC,SAAzC;AAEA,SAAmBC,UAAnB,QAA4C,SAA5C;AAKA;;AACA,OAAM,MAAOC,gBAAP,SAAsFH,UAAtF,CAAqH;AAcvHI,cAAYC,IAAZ,EAA2C;AACvC,UAAMA,IAAN;AACA,SAAKC,OAAL,GAAeP,MAAM,CAACQ,GAAP,CAAWF,IAAI,CAACG,KAAL,CAAW,KAAKC,IAAL,CAAUH,OAArB,CAAX,CAAf;AACH;AAbD;;;AACkB,SAAJI,IAAI,GAAqE;AAAA,sCAAXC,IAAW;AAAXA,UAAW;AAAA;;AACnF,QAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnB,YAAM,CAACC,MAAD,EAASP,OAAT,EAAkBQ,IAAlB,IAA0BH,IAAhC;AACA,YAAMF,IAAI,GAAG,IAAIP,UAAJ,CAAeW,MAAM,CAACJ,IAAtB,EAA4BH,OAA5B,EAAqC,IAArC,EAA2C,IAA3C,CAAb;AACA,aAAOP,MAAM,CAACQ,GAAP,CAAWT,IAAI,CAACI,UAAL,CAAgBO,IAAhB,EAAsB,CAAtB,EAAyBK,IAAI,CAACF,MAA9B,EAAsC,CAAtC,EAAyC,IAAzC,EAA+CE,IAA/C,EAAqDD,MAArD,CAAX,CAAP;AACH;;AACD,WAAOZ,wBAAwB,CAAC,MAAMU,IAAI,CAAC,CAAD,CAAJ,CAAQF,IAAf,EAAqBE,IAAI,CAAC,CAAD,CAAzB,CAA/B;AACH;;AASoB,MAAVI,UAAU;AAAK,WAAmB,KAAKV,IAAL,CAAUU,UAA7B;AAA0C;;AAC7DC,eAAa,CAACC,KAAD,EAAS;AAAI,WAAO,KAAKF,UAAL,CAAgBG,OAAhB,CAAwBD,KAAxB,CAAP;AAAwC;;AAClEE,QAAM,CAACC,GAAD,EAAY;AAA2B,WAAO,KAAKd,OAAL,CAAae,GAAb,CAAiBD,GAAjB,CAAP;AAA+B;;AAC5EE,UAAQ,CAACC,GAAD,EAAY;AAAwB,WAAO,KAAKR,UAAL,CAAgBM,GAAhB,CAAoBE,GAApB,CAAP;AAAkC;;AAC9EC,QAAM,CAACJ,GAAD,EAAcG,GAAd,EAAwC;AAAI,WAAO,KAAKjB,OAAL,CAAamB,GAAb,CAAiBL,GAAjB,EAAsBG,GAAtB,CAAP;AAAoC;;AACtFG,UAAQ,CAACH,GAAD,EAAcN,KAAd,EAAuC;AAAI,WAAO,KAAKF,UAAL,CAAgBU,GAAhB,CAAoBF,GAApB,EAAyBN,KAAzB,CAAP;AAAyC;;AA1BoB;AA6B1Hd,gBAAgB,CAACwB,SAAjB,CAAmCrB,OAAnC,GAA6C,IAA7C","names":["Data","Vector","BaseVector","vectorFromValuesWithType","Dictionary","DictionaryVector","constructor","data","indices","new","clone","type","from","args","length","values","keys","dictionary","reverseLookup","value","indexOf","getKey","idx","get","getValue","key","setKey","set","setValue","prototype"],"sources":["vector/dictionary.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n"]},"metadata":{},"sourceType":"module"}