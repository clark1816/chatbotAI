{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class IntBuilder extends FixedWidthBuilder {\n  setValue(index, value) {\n    this._values.set(index, value);\n  }\n\n}\n/** @ignore */\n\nexport class Int8Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Int16Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Int32Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Int64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n\n    super(options);\n    this._values = new WideBufferBuilder(new Int32Array(0), 2);\n  }\n\n  get values64() {\n    return this._values.buffer64;\n  }\n\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n\n}\n/** @ignore */\n\nexport class Uint8Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Uint16Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Uint32Builder extends IntBuilder {}\n/** @ignore */\n\nexport class Uint64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n\n    super(options);\n    this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n  }\n\n  get values64() {\n    return this._values.buffer64;\n  }\n\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n\n}\n\nconst toBigInt = (memo => value => {\n  if (ArrayBuffer.isView(value)) {\n    memo.buffer = value.buffer;\n    memo.byteOffset = value.byteOffset;\n    memo.byteLength = value.byteLength;\n    value = bignumToBigInt(memo);\n    memo.buffer = null;\n  }\n\n  return value;\n})({\n  'BigIntArray': BigInt64Array\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkD,YAAlD;AAGA;;AACA,OAAM,MAAOC,UAAP,SAA4DD,iBAA5D,CAAuF;AAClFE,UAAQ,CAACC,KAAD,EAAgBC,KAAhB,EAAkC;AAC7C,SAAKC,OAAL,CAAaC,GAAb,CAAiBH,KAAjB,EAAwBC,KAAxB;AACH;;AAHwF;AAM7F;;AACA,OAAM,MAAOG,WAAP,SAAwCN,UAAxC,CAA+D;AACrE;;AACA,OAAM,MAAOO,YAAP,SAAyCP,UAAzC,CAAiE;AACvE;;AACA,OAAM,MAAOQ,YAAP,SAAyCR,UAAzC,CAAiE;AACvE;;AACA,OAAM,MAAOS,YAAP,SAAyCT,UAAzC,CAAiE;AAEnEU,cAAYC,OAAZ,EAAiD;AAC7C,QAAIA,OAAO,CAAC,YAAD,CAAX,EAA2B;AACvBA,aAAO,CAAC,YAAD,CAAP,GAAyBA,OAAO,CAAC,YAAD,CAAP,CAAkCC,GAAlC,CAAsCC,QAAtC,CAAzB;AACH;;AACD,UAAMF,OAAN;AACA,SAAKP,OAAL,GAAe,IAAIP,iBAAJ,CAAsB,IAAIiB,UAAJ,CAAe,CAAf,CAAtB,EAAyC,CAAzC,CAAf;AACH;;AACkB,MAARC,QAAQ;AAAK,WAAO,KAAKX,OAAL,CAAaY,QAApB;AAA+B;;AAChDC,SAAO,CAACd,KAAD,EAAmC;AAAI,WAAO,MAAMc,OAAN,CAAcJ,QAAQ,CAACV,KAAD,CAAtB,CAAP;AAAwC;;AAV1B;AAavE;;AACA,OAAM,MAAOe,YAAP,SAAyClB,UAAzC,CAAiE;AACvE;;AACA,OAAM,MAAOmB,aAAP,SAA0CnB,UAA1C,CAAmE;AACzE;;AACA,OAAM,MAAOoB,aAAP,SAA0CpB,UAA1C,CAAmE;AACzE;;AACA,OAAM,MAAOqB,aAAP,SAA0CrB,UAA1C,CAAmE;AAErEU,cAAYC,OAAZ,EAAkD;AAC9C,QAAIA,OAAO,CAAC,YAAD,CAAX,EAA2B;AACvBA,aAAO,CAAC,YAAD,CAAP,GAAyBA,OAAO,CAAC,YAAD,CAAP,CAAkCC,GAAlC,CAAsCC,QAAtC,CAAzB;AACH;;AACD,UAAMF,OAAN;AACA,SAAKP,OAAL,GAAe,IAAIP,iBAAJ,CAAsB,IAAIyB,WAAJ,CAAgB,CAAhB,CAAtB,EAA0C,CAA1C,CAAf;AACH;;AACkB,MAARP,QAAQ;AAAK,WAAO,KAAKX,OAAL,CAAaY,QAApB;AAA+B;;AAChDC,SAAO,CAACd,KAAD,EAAoC;AAAI,WAAO,MAAMc,OAAN,CAAcJ,QAAQ,CAACV,KAAD,CAAtB,CAAP;AAAwC;;AAVzB;;AAazE,MAAMU,QAAQ,GAAG,CAAEU,IAAD,IAAgBpB,KAAD,IAAe;AAC5C,MAAIqB,WAAW,CAACC,MAAZ,CAAmBtB,KAAnB,CAAJ,EAA+B;AAC3BoB,QAAI,CAACG,MAAL,GAAcvB,KAAK,CAACuB,MAApB;AACAH,QAAI,CAACI,UAAL,GAAkBxB,KAAK,CAACwB,UAAxB;AACAJ,QAAI,CAACK,UAAL,GAAkBzB,KAAK,CAACyB,UAAxB;AACAzB,SAAK,GAAGP,cAAc,CAAC2B,IAAD,CAAtB;AACAA,QAAI,CAACG,MAAL,GAAc,IAAd;AACH;;AACD,SAAOvB,KAAP;AACH,CATgB,EASd;AAAE,iBAAeL;AAAjB,CATc,CAAjB","names":["bignumToBigInt","WideBufferBuilder","BigInt64Array","FixedWidthBuilder","IntBuilder","setValue","index","value","_values","set","Int8Builder","Int16Builder","Int32Builder","Int64Builder","constructor","options","map","toBigInt","Int32Array","values64","buffer64","isValid","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","Uint32Array","memo","ArrayBuffer","isView","buffer","byteOffset","byteLength"],"sources":["builder/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n"]},"metadata":{},"sourceType":"module"}