{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { Map_ } from '../type';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class MapBuilder extends VariableWidthBuilder {\n  set(index, value) {\n    return super.set(index, value);\n  }\n\n  setValue(index, value) {\n    value = value instanceof Map ? value : new Map(Object.entries(value));\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.size);\n    this._pendingLength += value.size;\n    pending.set(index, value);\n  }\n\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `${this.numChildren}`;\n\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n\n    this.children[this.numChildren] = child;\n    this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n    return this.numChildren - 1;\n  }\n\n  _flushPending(pending) {\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    pending.forEach((value, index) => {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.size);\n        setValue(this, index, value);\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,QAAsB,WAAtB;AACA,SAAmBC,IAAnB,QAAuC,SAAvC;AACA,SAAkBC,oBAAlB,QAA8C,YAA9C;AAMA;;AACA,OAAM,MAAOC,UAAP,SAA2FD,oBAA3F,CAAkI;AAG7HE,KAAG,CAACC,KAAD,EAAgBC,KAAhB,EAAgD;AACtD,WAAO,MAAMF,GAAN,CAAUC,KAAV,EAAiBC,KAAjB,CAAP;AACH;;AAEMC,UAAQ,CAACF,KAAD,EAAgBC,KAAhB,EAAwC;AACnDA,SAAK,GAAGA,KAAK,YAAYE,GAAjB,GAAuBF,KAAvB,GAA+B,IAAIE,GAAJ,CAAQC,MAAM,CAACC,OAAP,CAAeJ,KAAf,CAAR,CAAvC;AACA,UAAMK,OAAO,GAAG,KAAKC,QAAL,KAAkB,KAAKA,QAAL,GAAgB,IAAIJ,GAAJ,EAAlC,CAAhB;AACA,UAAMK,OAAO,GAAGF,OAAO,CAACG,GAAR,CAAYT,KAAZ,CAAhB;AACAQ,WAAO,KAAK,KAAKE,cAAL,IAAuBF,OAAO,CAACG,IAApC,CAAP;AACA,SAAKD,cAAL,IAAuBT,KAAK,CAACU,IAA7B;AACAL,WAAO,CAACP,GAAR,CAAYC,KAAZ,EAAmBC,KAAnB;AACH;;AAEMW,UAAQ,CAACC,KAAD,EAA2E;AAAA,QAA5BC,IAA4B,uEAArB,GAAG,KAAKC,WAAW,EAAE;;AACtF,QAAI,KAAKA,WAAL,GAAmB,CAAvB,EAA0B;AACtB,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,SAAKC,QAAL,CAAc,KAAKF,WAAnB,IAAkCF,KAAlC;AACA,SAAKK,IAAL,GAAY,IAAItB,IAAJ,CAAe,IAAID,KAAJ,CAAUmB,IAAV,EAAgBD,KAAK,CAACK,IAAtB,EAA4B,IAA5B,CAAf,EAAkD,KAAKA,IAAL,CAAUC,UAA5D,CAAZ;AACA,WAAO,KAAKJ,WAAL,GAAmB,CAA1B;AACH;;AAESK,eAAa,CAACd,OAAD,EAAyB;AAC5C,UAAMe,OAAO,GAAG,KAAKC,QAArB;AACA,UAAMpB,QAAQ,GAAG,KAAKqB,SAAtB;AACAjB,WAAO,CAACkB,OAAR,CAAgB,CAACvB,KAAD,EAAQD,KAAR,KAAiB;AAC7B,UAAIC,KAAK,KAAKwB,SAAd,EAAyB;AACrBJ,eAAO,CAACtB,GAAR,CAAYC,KAAZ,EAAmB,CAAnB;AACH,OAFD,MAEO;AACHqB,eAAO,CAACtB,GAAR,CAAYC,KAAZ,EAAmBC,KAAK,CAACU,IAAzB;AACAT,gBAAQ,CAAC,IAAD,EAAOF,KAAP,EAAcC,KAAd,CAAR;AACH;AACJ,KAPD;AAQH;;AApCmI","names":["Field","Map_","VariableWidthBuilder","MapBuilder","set","index","value","setValue","Map","Object","entries","pending","_pending","current","get","_pendingLength","size","addChild","child","name","numChildren","Error","children","type","keysSorted","_flushPending","offsets","_offsets","_setValue","forEach","undefined"],"sources":["builder/map.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}