{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\n/** @ignore */\n\nexport const kUnknownNullCount = -1;\n/** @ignore */\n\nexport class Data {\n  constructor(type, offset, length, nullCount, buffers, childData, dictionary) {\n    this.type = type;\n    this.dictionary = dictionary;\n    this.offset = Math.floor(Math.max(offset || 0, 0));\n    this.length = Math.floor(Math.max(length || 0, 0));\n    this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    this.childData = (childData || []).map(x => x instanceof Data ? x : x.data);\n    let buffer;\n\n    if (buffers instanceof Data) {\n      this.stride = buffers.stride;\n      this.values = buffers.values;\n      this.typeIds = buffers.typeIds;\n      this.nullBitmap = buffers.nullBitmap;\n      this.valueOffsets = buffers.valueOffsets;\n    } else {\n      this.stride = strideForType(type);\n\n      if (buffers) {\n        (buffer = buffers[0]) && (this.valueOffsets = buffer);\n        (buffer = buffers[1]) && (this.values = buffer);\n        (buffer = buffers[2]) && (this.nullBitmap = buffer);\n        (buffer = buffers[3]) && (this.typeIds = buffer);\n      }\n    }\n  }\n\n  get typeId() {\n    return this.type.typeId;\n  }\n\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n\n  get buffers() {\n    return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];\n  }\n\n  get byteLength() {\n    let byteLength = 0;\n    let {\n      valueOffsets,\n      values,\n      nullBitmap,\n      typeIds\n    } = this;\n    valueOffsets && (byteLength += valueOffsets.byteLength);\n    values && (byteLength += values.byteLength);\n    nullBitmap && (byteLength += nullBitmap.byteLength);\n    typeIds && (byteLength += typeIds.byteLength);\n    return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n  }\n\n  get nullCount() {\n    let nullCount = this._nullCount;\n    let nullBitmap;\n\n    if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n      this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n    }\n\n    return nullCount;\n  }\n\n  clone(type) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.offset;\n    let length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.length;\n    let nullCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this._nullCount;\n    let buffers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this;\n    let childData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.childData;\n    return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n  }\n\n  slice(offset, length) {\n    const {\n      stride,\n      typeId,\n      childData\n    } = this; // +true === 1, +false === 0, so this means\n    // we keep nullCount at 0 if it's already 0,\n    // otherwise set to the invalidated flag -1\n\n    const nullCount = +(this._nullCount === 0) - 1;\n    const childStride = typeId === 16\n    /* FixedSizeList */\n    ? stride : 1;\n\n    const buffers = this._sliceBuffers(offset, length, stride, typeId);\n\n    return this.clone(this.type, this.offset + offset, length, nullCount, buffers, // Don't slice children if we have value offsets (the variable-width types)\n    !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n  }\n\n  _changeLengthAndBackfillNullBitmap(newLength) {\n    if (this.typeId === Type.Null) {\n      return this.clone(this.type, 0, newLength, 0);\n    }\n\n    const {\n      length,\n      nullCount\n    } = this; // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n\n    const bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3); // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n\n    bitmap[length >> 3] = (1 << length - (length & ~7)) - 1; // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n\n    if (nullCount > 0) {\n      bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n    }\n\n    const buffers = this.buffers;\n    buffers[BufferType.VALIDITY] = bitmap;\n    return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n  }\n\n  _sliceBuffers(offset, length, stride, typeId) {\n    let arr,\n        {\n      buffers\n    } = this; // If typeIds exist, slice the typeIds buffer\n\n    (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length)); // If offsets exist, only slice the offsets buffer\n\n    (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) || // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n    (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n    return buffers;\n  }\n\n  _sliceChildren(childData, offset, length) {\n    return childData.map(child => child.slice(offset, length));\n  } //\n  // Convenience methods for creating Data instances for each of the Arrow Vector types\n  //\n\n  /** @nocollapse */\n\n\n  static new(type, offset, length, nullCount, buffers, childData, dictionary) {\n    if (buffers instanceof Data) {\n      buffers = buffers.buffers;\n    } else if (!buffers) {\n      buffers = [];\n    }\n\n    switch (type.typeId) {\n      case Type.Null:\n        return Data.Null(type, offset, length);\n\n      case Type.Int:\n        return Data.Int(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Dictionary:\n        return Data.Dictionary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary);\n\n      case Type.Float:\n        return Data.Float(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Bool:\n        return Data.Bool(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Decimal:\n        return Data.Decimal(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Date:\n        return Data.Date(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Time:\n        return Data.Time(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Timestamp:\n        return Data.Timestamp(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Interval:\n        return Data.Interval(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.FixedSizeBinary:\n        return Data.FixedSizeBinary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []);\n\n      case Type.Binary:\n        return Data.Binary(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n\n      case Type.Utf8:\n        return Data.Utf8(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []);\n\n      case Type.List:\n        return Data.List(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n\n      case Type.FixedSizeList:\n        return Data.FixedSizeList(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]);\n\n      case Type.Struct:\n        return Data.Struct(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []);\n\n      case Type.Map:\n        return Data.Map(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]);\n\n      case Type.Union:\n        return Data.Union(type, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData);\n    }\n\n    throw new Error(`Unrecognized typeId ${type.typeId}`);\n  }\n  /** @nocollapse */\n\n\n  static Null(type, offset, length) {\n    return new Data(type, offset, length, 0);\n  }\n  /** @nocollapse */\n\n\n  static Int(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Dictionary(type, offset, length, nullCount, nullBitmap, data, dictionary) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n  }\n  /** @nocollapse */\n\n\n  static Float(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Bool(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Date(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Time(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Interval(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n    return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n  }\n  /** @nocollapse */\n\n\n  static List(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n\n\n  static FixedSizeList(type, offset, length, nullCount, nullBitmap, child) {\n    return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n\n\n  static Struct(type, offset, length, nullCount, nullBitmap, children) {\n    return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n  }\n  /** @nocollapse */\n\n\n  static Map(type, offset, length, nullCount, nullBitmap, valueOffsets, child) {\n    return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n  }\n  /** @nocollapse */\n\n\n  static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children) {\n    const buffers = [undefined, undefined, toUint8Array(nullBitmap), toArrayBufferView(type.ArrayType, typeIds)];\n\n    if (type.mode === UnionMode.Sparse) {\n      return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren);\n    }\n\n    buffers[BufferType.OFFSET] = toInt32Array(valueOffsetsOrChildren);\n    return new Data(type, offset, length, nullCount, buffers, children);\n  }\n\n}\nData.prototype.childData = Object.freeze([]);","map":{"version":3,"mappings":"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","names":["truncateBitmap","popcnt_bit_range","BufferType","UnionMode","Type","strideForType","toArrayBufferView","toUint8Array","toInt32Array","kUnknownNullCount","Data","constructor","type","offset","length","nullCount","buffers","childData","dictionary","Math","floor","max","_nullCount","map","x","data","buffer","stride","values","typeIds","nullBitmap","valueOffsets","typeId","ArrayType","byteLength","reduce","child","clone","slice","childStride","_sliceBuffers","_sliceChildren","_changeLengthAndBackfillNullBitmap","newLength","Null","bitmap","Uint8Array","fill","set","VALIDITY","arr","TYPE","subarray","OFFSET","DATA","new","Int","Dictionary","Float","Bool","Decimal","Date","Time","Timestamp","Interval","FixedSizeBinary","Binary","Utf8","List","FixedSizeList","Struct","Map","Union","Error","undefined","indices","children","valueOffsetsOrChildren","mode","Sparse","prototype","Object","freeze"],"sources":["data.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n"]},"metadata":{},"sourceType":"module"}