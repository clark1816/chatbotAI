{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n/** @ignore */\n\nexport class TypeAssembler extends Visitor {\n  visit(node, builder) {\n    return node == null || builder == null ? undefined : super.visit(node, builder);\n  }\n\n  visitNull(_node, b) {\n    Null.startNull(b);\n    return Null.endNull(b);\n  }\n\n  visitInt(node, b) {\n    Int.startInt(b);\n    Int.addBitWidth(b, node.bitWidth);\n    Int.addIsSigned(b, node.isSigned);\n    return Int.endInt(b);\n  }\n\n  visitFloat(node, b) {\n    FloatingPoint.startFloatingPoint(b);\n    FloatingPoint.addPrecision(b, node.precision);\n    return FloatingPoint.endFloatingPoint(b);\n  }\n\n  visitBinary(_node, b) {\n    Binary.startBinary(b);\n    return Binary.endBinary(b);\n  }\n\n  visitBool(_node, b) {\n    Bool.startBool(b);\n    return Bool.endBool(b);\n  }\n\n  visitUtf8(_node, b) {\n    Utf8.startUtf8(b);\n    return Utf8.endUtf8(b);\n  }\n\n  visitDecimal(node, b) {\n    Decimal.startDecimal(b);\n    Decimal.addScale(b, node.scale);\n    Decimal.addPrecision(b, node.precision);\n    return Decimal.endDecimal(b);\n  }\n\n  visitDate(node, b) {\n    Date.startDate(b);\n    Date.addUnit(b, node.unit);\n    return Date.endDate(b);\n  }\n\n  visitTime(node, b) {\n    Time.startTime(b);\n    Time.addUnit(b, node.unit);\n    Time.addBitWidth(b, node.bitWidth);\n    return Time.endTime(b);\n  }\n\n  visitTimestamp(node, b) {\n    const timezone = node.timezone && b.createString(node.timezone) || undefined;\n    Timestamp.startTimestamp(b);\n    Timestamp.addUnit(b, node.unit);\n\n    if (timezone !== undefined) {\n      Timestamp.addTimezone(b, timezone);\n    }\n\n    return Timestamp.endTimestamp(b);\n  }\n\n  visitInterval(node, b) {\n    Interval.startInterval(b);\n    Interval.addUnit(b, node.unit);\n    return Interval.endInterval(b);\n  }\n\n  visitList(_node, b) {\n    List.startList(b);\n    return List.endList(b);\n  }\n\n  visitStruct(_node, b) {\n    Struct.startStruct_(b);\n    return Struct.endStruct_(b);\n  }\n\n  visitUnion(node, b) {\n    Union.startTypeIdsVector(b, node.typeIds.length);\n    const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n    Union.startUnion(b);\n    Union.addMode(b, node.mode);\n    Union.addTypeIds(b, typeIds);\n    return Union.endUnion(b);\n  }\n\n  visitDictionary(node, b) {\n    const indexType = this.visit(node.indices, b);\n    DictionaryEncoding.startDictionaryEncoding(b);\n    DictionaryEncoding.addId(b, new Long(node.id, 0));\n    DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n\n    if (indexType !== undefined) {\n      DictionaryEncoding.addIndexType(b, indexType);\n    }\n\n    return DictionaryEncoding.endDictionaryEncoding(b);\n  }\n\n  visitFixedSizeBinary(node, b) {\n    FixedSizeBinary.startFixedSizeBinary(b);\n    FixedSizeBinary.addByteWidth(b, node.byteWidth);\n    return FixedSizeBinary.endFixedSizeBinary(b);\n  }\n\n  visitFixedSizeList(node, b) {\n    FixedSizeList.startFixedSizeList(b);\n    FixedSizeList.addListSize(b, node.listSize);\n    return FixedSizeList.endFixedSizeList(b);\n  }\n\n  visitMap(node, b) {\n    Map_.startMap(b);\n    Map_.addKeysSorted(b, node.keysSorted);\n    return Map_.endMap(b);\n  }\n\n}\n/** @ignore */\n\nexport const instance = new TypeAssembler();","map":{"version":3,"mappings":"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","names":["flatbuffers","Long","Schema_","Visitor","Null","org","apache","arrow","flatbuf","Int","FloatingPoint","Binary","Bool","Utf8","Decimal","Date","Time","Timestamp","Interval","List","Struct","Struct_","Union","DictionaryEncoding","FixedSizeBinary","FixedSizeList","Map_","Map","TypeAssembler","visit","node","builder","undefined","visitNull","_node","b","startNull","endNull","visitInt","startInt","addBitWidth","bitWidth","addIsSigned","isSigned","endInt","visitFloat","startFloatingPoint","addPrecision","precision","endFloatingPoint","visitBinary","startBinary","endBinary","visitBool","startBool","endBool","visitUtf8","startUtf8","endUtf8","visitDecimal","startDecimal","addScale","scale","endDecimal","visitDate","startDate","addUnit","unit","endDate","visitTime","startTime","endTime","visitTimestamp","timezone","createString","startTimestamp","addTimezone","endTimestamp","visitInterval","startInterval","endInterval","visitList","startList","endList","visitStruct","startStruct_","endStruct_","visitUnion","startTypeIdsVector","typeIds","length","createTypeIdsVector","startUnion","addMode","mode","addTypeIds","endUnion","visitDictionary","indexType","indices","startDictionaryEncoding","addId","id","addIsOrdered","isOrdered","addIndexType","endDictionaryEncoding","visitFixedSizeBinary","startFixedSizeBinary","addByteWidth","byteWidth","endFixedSizeBinary","visitFixedSizeList","startFixedSizeList","addListSize","listSize","endFixedSizeList","visitMap","startMap","addKeysSorted","keysSorted","endMap","instance"],"sources":["visitor/typeassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n"]},"metadata":{},"sourceType":"module"}