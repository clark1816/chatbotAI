{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\n\nfunction intAsHex(value) {\n  if (value < 0) {\n    value = 0xFFFFFFFF + value + 1;\n  }\n\n  return `0x${value.toString(16)}`;\n}\n/** @ignore */\n\n\nconst kInt32DecimalDigits = 8;\n/** @ignore */\n\nconst kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n/** @ignore */\n\nexport class BaseInt64 {\n  constructor(buffer) {\n    this.buffer = buffer;\n  }\n\n  high() {\n    return this.buffer[1];\n  }\n\n  low() {\n    return this.buffer[0];\n  }\n\n  _times(other) {\n    // Break the left and right numbers into 16 bit chunks\n    // so that we can multiply them without overflow.\n    const L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);\n    const R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);\n    let product = L[3] * R[3];\n    this.buffer[0] = product & 0xFFFF;\n    let sum = product >>> 16;\n    product = L[2] * R[3];\n    sum += product;\n    product = L[3] * R[2] >>> 0;\n    sum += product;\n    this.buffer[0] += sum << 16;\n    this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;\n    this.buffer[1] += sum >>> 16;\n    this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n    this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n    return this;\n  }\n\n  _plus(other) {\n    const sum = this.buffer[0] + other.buffer[0] >>> 0;\n    this.buffer[1] += other.buffer[1];\n\n    if (sum < this.buffer[0] >>> 0) {\n      ++this.buffer[1];\n    }\n\n    this.buffer[0] = sum;\n  }\n\n  lessThan(other) {\n    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n  }\n\n  equals(other) {\n    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n  }\n\n  greaterThan(other) {\n    return other.lessThan(this);\n  }\n\n  hex() {\n    return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n  }\n\n}\n/** @ignore */\n\nexport class Uint64 extends BaseInt64 {\n  times(other) {\n    this._times(other);\n\n    return this;\n  }\n\n  plus(other) {\n    this._plus(other);\n\n    return this;\n  }\n  /** @nocollapse */\n\n\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Uint64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    const length = str.length;\n    let out = new Uint64(out_buffer);\n\n    for (let posn = 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n\n    return out;\n  }\n  /** @nocollapse */\n\n\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n\n    for (let i = -1, n = values.length; ++i < n;) {\n      Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n\n    return data;\n  }\n  /** @nocollapse */\n\n\n  static multiply(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n\n\n  static add(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n\n}\n/** @ignore */\n\nexport class Int64 extends BaseInt64 {\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n\n    return this;\n  }\n\n  times(other) {\n    this._times(other);\n\n    return this;\n  }\n\n  plus(other) {\n    this._plus(other);\n\n    return this;\n  }\n\n  lessThan(other) {\n    // force high bytes to be signed\n    const this_high = this.buffer[1] << 0;\n    const other_high = other.buffer[1] << 0;\n    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n  }\n  /** @nocollapse */\n\n\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // TODO: Assert that out_buffer is 0 and length = 2\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int64(out_buffer);\n\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n\n\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n\n    return data;\n  }\n  /** @nocollapse */\n\n\n  static multiply(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n\n\n  static add(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n\n}\n/** @ignore */\n\nexport class Int128 {\n  constructor(buffer) {\n    this.buffer = buffer; // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n  }\n\n  high() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n  }\n\n  low() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n  }\n\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n    this.buffer[2] = ~this.buffer[2];\n    this.buffer[3] = ~this.buffer[3];\n\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n\n    if (this.buffer[1] == 0) {\n      ++this.buffer[2];\n    }\n\n    if (this.buffer[2] == 0) {\n      ++this.buffer[3];\n    }\n\n    return this;\n  }\n\n  times(other) {\n    // Break the left and right numbers into 32 bit chunks\n    // so that we can multiply them without overflow.\n    const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n    const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n    const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n    const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n    const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n    const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n    const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n    const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n    let product = Uint64.multiply(L3, R3);\n    this.buffer[0] = product.low();\n    let sum = new Uint64(new Uint32Array([product.high(), 0]));\n    product = Uint64.multiply(L2, R3);\n    sum.plus(product);\n    product = Uint64.multiply(L3, R2);\n    sum.plus(product);\n    this.buffer[1] = sum.low();\n    this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n    this.buffer[2] = sum.high();\n    let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));\n    this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();\n    return this;\n  }\n\n  plus(other) {\n    let sums = new Uint32Array(4);\n    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n\n    if (sums[0] < this.buffer[0] >>> 0) {\n      ++sums[1];\n    }\n\n    if (sums[1] < this.buffer[1] >>> 0) {\n      ++sums[2];\n    }\n\n    if (sums[2] < this.buffer[2] >>> 0) {\n      ++sums[3];\n    }\n\n    this.buffer[3] = sums[3];\n    this.buffer[2] = sums[2];\n    this.buffer[1] = sums[1];\n    this.buffer[0] = sums[0];\n    return this;\n  }\n\n  hex() {\n    return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n  }\n  /** @nocollapse */\n\n\n  static multiply(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n\n\n  static add(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n  /** @nocollapse */\n\n\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int128.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n\n\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    // TODO: Assert that out_buffer is 0 and length = 4\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int128(out_buffer);\n\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n      const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n\n\n  static convertArray(values) {\n    // TODO: Distinguish between string and number at compile-time\n    const data = new Uint32Array(values.length * 4);\n\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["carryBit16","intAsHex","value","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","constructor","buffer","high","low","_times","other","L","Uint32Array","R","product","sum","_plus","lessThan","equals","greaterThan","hex","Uint64","times","plus","from","val","out_buffer","fromString","fromNumber","num","str","length","out","posn","group","chunk","parseInt","substr","multiple","convertArray","values","data","i","n","byteOffset","multiply","left","right","rtrn","add","Int64","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums"],"sources":["util/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}