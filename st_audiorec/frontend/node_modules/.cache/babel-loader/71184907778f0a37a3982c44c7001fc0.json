{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\nexport class Schema {\n  constructor() {\n    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let metadata = arguments.length > 1 ? arguments[1] : undefined;\n    let dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n\n    this.dictionaries = dictionaries;\n  }\n  /** @nocollapse */\n\n\n  static from() {\n    return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n  }\n  /** @nocollapse */\n\n\n  static new() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new Schema(selectFieldArgs(args)[0]);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Schema';\n  }\n\n  toString() {\n    return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n  }\n\n  compareTo(other) {\n    return comparer.compareSchemas(this, other);\n  }\n\n  select() {\n    for (var _len2 = arguments.length, columnNames = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      columnNames[_key2] = arguments[_key2];\n    }\n\n    const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n    return new Schema(this.fields.filter(f => names[f.name]), this.metadata);\n  }\n\n  selectAt() {\n    for (var _len3 = arguments.length, columnIndices = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      columnIndices[_key3] = arguments[_key3];\n    }\n\n    return new Schema(columnIndices.map(i => this.fields[i]).filter(Boolean), this.metadata);\n  }\n\n  assign() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    const other = args[0] instanceof Schema ? args[0] : new Schema(selectArgs(Field, args));\n    const curFields = [...this.fields];\n    const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n    const newFields = other.fields.filter(f2 => {\n      const i = curFields.findIndex(f => f.name === f2.name);\n      return ~i ? (curFields[i] = f2.clone({\n        metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n      })) && false : true;\n    });\n    const newDictionaries = generateDictionaryMap(newFields, new Map());\n    return new Schema([...curFields, ...newFields], metadata, new Map([...this.dictionaries, ...newDictionaries]));\n  }\n\n}\nexport class Field {\n  constructor(name, type) {\n    let nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let metadata = arguments.length > 3 ? arguments[3] : undefined;\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n\n\n  static new() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    let [name, type, nullable, metadata] = args;\n\n    if (args[0] && typeof args[0] === 'object') {\n      ({\n        name\n      } = args[0]);\n      type === undefined && (type = args[0].type);\n      nullable === undefined && (nullable = args[0].nullable);\n      metadata === undefined && (metadata = args[0].metadata);\n    }\n\n    return new Field(`${name}`, type, nullable, metadata);\n  }\n\n  get typeId() {\n    return this.type.typeId;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Field';\n  }\n\n  toString() {\n    return `${this.name}: ${this.type}`;\n  }\n\n  compareTo(other) {\n    return comparer.compareField(this, other);\n  }\n\n  clone() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    let [name, type, nullable, metadata] = args;\n    !args[0] || typeof args[0] !== 'object' ? [name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args : ({\n      name = this.name,\n      type = this.type,\n      nullable = this.nullable,\n      metadata = this.metadata\n    } = args[0]);\n    return Field.new(name, type, nullable, metadata);\n  }\n\n}\n/** @ignore */\n\nfunction mergeMaps(m1, m2) {\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n/** @ignore */\n\n\nfunction generateDictionaryMap(fields) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n\n  for (let i = -1, n = fields.length; ++i < n;) {\n    const field = fields[i];\n    const type = field.type;\n\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n      }\n    }\n\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n\n  return dictionaries;\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;","map":{"version":3,"mappings":"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","names":["DataType","selectArgs","selectFieldArgs","instance","comparer","Schema","constructor","fields","metadata","dictionaries","Map","generateDictionaryMap","from","new","args","Symbol","toStringTag","toString","map","f","i","join","compareTo","other","compareSchemas","select","columnNames","names","reduce","xs","x","Object","create","filter","name","selectAt","columnIndices","Boolean","assign","Field","curFields","mergeMaps","newFields","f2","findIndex","clone","newDictionaries","type","nullable","undefined","typeId","compareField","m1","m2","n","length","field","isDictionary","has","id","set","dictionary","get","Error","children","prototype"],"sources":["schema.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n"]},"metadata":{},"sourceType":"module"}