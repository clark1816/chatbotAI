{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\n\nconst roundLengthUpToNearest64Bytes = (len, BPE) => (len * BPE + 63 & ~63 || 64) / BPE;\n/** @ignore */\n\n\nconst sliceOrExtendArray = function (arr) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n};\n/** @ignore */\n\n\nexport class BufferBuilder {\n  constructor(buffer) {\n    let stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n\n  get byteLength() {\n    return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n  }\n\n  get reservedLength() {\n    return this.buffer.length / this.stride;\n  }\n\n  get reservedByteLength() {\n    return this.buffer.byteLength;\n  } // @ts-ignore\n\n\n  set(index, value) {\n    return this;\n  }\n\n  append(value) {\n    return this.set(this.length, value);\n  }\n\n  reserve(extra) {\n    if (extra > 0) {\n      this.length += extra;\n      const stride = this.stride;\n      const length = this.length * stride;\n      const reserved = this.buffer.length;\n\n      if (length >= reserved) {\n        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n      }\n    }\n\n    return this;\n  }\n\n  flush() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n    length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n    const array = sliceOrExtendArray(this.buffer, length);\n    this.clear();\n    return array;\n  }\n\n  clear() {\n    this.length = 0;\n\n    this._resize(0);\n\n    return this;\n  }\n\n  _resize(newLength) {\n    return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n  }\n\n}\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\n\nexport class DataBufferBuilder extends BufferBuilder {\n  last() {\n    return this.get(this.length - 1);\n  }\n\n  get(index) {\n    return this.buffer[index];\n  }\n\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n    this.buffer[index * this.stride] = value;\n    return this;\n  }\n\n}\n/** @ignore */\n\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);\n    super(data, 1 / 8);\n    this.numValid = 0;\n  }\n\n  get numInvalid() {\n    return this.length - this.numValid;\n  }\n\n  get(idx) {\n    return this.buffer[idx >> 3] >> idx % 8 & 1;\n  }\n\n  set(idx, val) {\n    const {\n      buffer\n    } = this.reserve(idx - this.length + 1);\n    const byte = idx >> 3,\n          bit = idx % 8,\n          cur = buffer[byte] >> bit & 1; // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n    // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n\n    val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n    return this;\n  }\n\n  clear() {\n    this.numValid = 0;\n    return super.clear();\n  }\n\n}\n/** @ignore */\n\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);\n    super(data, 1);\n  }\n\n  append(value) {\n    return this.set(this.length - 1, value);\n  }\n\n  set(index, value) {\n    const offset = this.length - 1;\n    const buffer = this.reserve(index - offset + 1).buffer;\n\n    if (offset < index++) {\n      buffer.fill(buffer[offset], offset, index);\n    }\n\n    buffer[index] = buffer[index - 1] + value;\n    return this;\n  }\n\n  flush() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;\n\n    if (length > this.length) {\n      this.set(length - 1, 0);\n    }\n\n    return super.flush(length + 1);\n  }\n\n}\n/** @ignore */\n\nexport class WideBufferBuilder extends BufferBuilder {\n  get ArrayType64() {\n    return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n  }\n\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n\n    switch (typeof value) {\n      case 'bigint':\n        this.buffer64[index] = value;\n        break;\n\n      case 'number':\n        this.buffer[index * this.stride] = value;\n        break;\n\n      default:\n        this.buffer.set(value, index * this.stride);\n    }\n\n    return this;\n  }\n\n  _resize(newLength) {\n    const data = super._resize(newLength);\n\n    const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n\n    if (BigIntAvailable) {\n      this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,cAAzC,QAA+D,gBAA/D;AAaA;;AACA,MAAMC,6BAA6B,GAAG,CAACC,GAAD,EAAcC,GAAd,KAA8B,CAAID,GAAG,GAAGC,GAAP,GAAc,EAAf,GAAqB,CAAC,EAAvB,IAA8B,EAA/B,IAAqCA,GAAzG;AACA;;;AACA,MAAMC,kBAAkB,GAAG,UAAqCC,GAArC;AAAA,MAA6CH,GAA7C,uEAAmD,CAAnD;AAAA,SACvBG,GAAG,CAACC,MAAJ,IAAcJ,GAAd,GAAoBG,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgBL,GAAhB,CAApB,GAA2CL,MAAM,CAAC,IAAKQ,GAAG,CAACG,WAAT,CAA6BN,GAA7B,CAAD,EAAoCG,GAApC,EAAyC,CAAzC,CAD1B;AAAA,CAA3B;AASA;;;AACA,OAAM,MAAOI,aAAP,CAAoB;AAEtBD,cAAYE,MAAZ,EAAiC;AAAA,QAAVC,MAAU,uEAAD,CAAC;AAC7B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,iBAAL,GAAyBF,MAAM,CAACE,iBAAhC;AACA,SAAKC,SAAL,GAAiBH,MAAM,CAACF,WAAxB;;AACA,SAAKM,OAAL,CAAa,KAAKR,MAAL,GAAcI,MAAM,CAACJ,MAAP,GAAgBK,MAAhB,GAAyB,CAApD;AACH;;AAQoB,MAAVI,UAAU;AAAK,WAAO,KAAKT,MAAL,GAAc,KAAKK,MAAnB,GAA4B,KAAKC,iBAAjC,GAAqD,CAA5D;AAAgE;;AACjE,MAAdI,cAAc;AAAK,WAAO,KAAKN,MAAL,CAAYJ,MAAZ,GAAqB,KAAKK,MAAjC;AAA0C;;AAC3C,MAAlBM,kBAAkB;AAAK,WAAO,KAAKP,MAAL,CAAYK,UAAnB;AAAgC,GAlB5C,CAoBtB;;;AACOG,KAAG,CAACC,KAAD,EAAgBC,KAAhB,EAA6B;AAAI,WAAO,IAAP;AAAc;;AAClDC,QAAM,CAACD,KAAD,EAAc;AAAI,WAAO,KAAKF,GAAL,CAAS,KAAKZ,MAAd,EAAsBc,KAAtB,CAAP;AAAsC;;AAC9DE,SAAO,CAACC,KAAD,EAAc;AACxB,QAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,WAAKjB,MAAL,IAAeiB,KAAf;AACA,YAAMZ,MAAM,GAAG,KAAKA,MAApB;AACA,YAAML,MAAM,GAAG,KAAKA,MAAL,GAAcK,MAA7B;AACA,YAAMa,QAAQ,GAAG,KAAKd,MAAL,CAAYJ,MAA7B;;AACA,UAAIA,MAAM,IAAIkB,QAAd,EAAwB;AACpB,aAAKV,OAAL,CAAaU,QAAQ,KAAK,CAAb,GACPvB,6BAA6B,CAACK,MAAM,GAAG,CAAV,EAAa,KAAKM,iBAAlB,CADtB,GAEPX,6BAA6B,CAACK,MAAM,GAAG,CAAV,EAAa,KAAKM,iBAAlB,CAFnC;AAIH;AACJ;;AACD,WAAO,IAAP;AACH;;AACMa,OAAK,GAAqB;AAAA,QAApBnB,MAAoB,uEAAX,KAAKA,MAAM;AAC7BA,UAAM,GAAGL,6BAA6B,CAACK,MAAM,GAAG,KAAKK,MAAf,EAAuB,KAAKC,iBAA5B,CAAtC;AACA,UAAMc,KAAK,GAAGtB,kBAAkB,CAAI,KAAKM,MAAT,EAAiBJ,MAAjB,CAAhC;AACA,SAAKqB,KAAL;AACA,WAAOD,KAAP;AACH;;AACMC,OAAK;AACR,SAAKrB,MAAL,GAAc,CAAd;;AACA,SAAKQ,OAAL,CAAa,CAAb;;AACA,WAAO,IAAP;AACH;;AACSA,SAAO,CAACc,SAAD,EAAkB;AAC/B,WAAO,KAAKlB,MAAL,GAAkBb,MAAM,CAAC,IAAI,KAAKgB,SAAT,CAAmBe,SAAnB,CAAD,EAAgC,KAAKlB,MAArC,CAA/B;AACH;;AAnDqB;AAsDzBD,aAAa,CAACoB,SAAd,CAAgCC,MAAhC,GAAyC,CAAzC;AAED;;AACA,OAAM,MAAOC,iBAAP,SAAuDtB,aAAvD,CAA+E;AAC1EuB,MAAI;AAAK,WAAO,KAAKC,GAAL,CAAS,KAAK3B,MAAL,GAAc,CAAvB,CAAP;AAAmC;;AAC5C2B,KAAG,CAACd,KAAD,EAAc;AAAI,WAAO,KAAKT,MAAL,CAAYS,KAAZ,CAAP;AAA4B;;AACjDD,KAAG,CAACC,KAAD,EAAgBC,KAAhB,EAA6B;AACnC,SAAKE,OAAL,CAAaH,KAAK,GAAG,KAAKb,MAAb,GAAsB,CAAnC;AACA,SAAKI,MAAL,CAAYS,KAAK,GAAG,KAAKR,MAAzB,IAAmCS,KAAnC;AACA,WAAO,IAAP;AACH;;AAPgF;AAUrF;;AACA,OAAM,MAAOc,mBAAP,SAAmCH,iBAAnC,CAAgE;AAElEvB,gBAAoC;AAAA,QAAxB2B,IAAwB,uEAAjB,IAAIC,UAAJ,CAAe,CAAf,CAAiB;AAAI,UAAMD,IAAN,EAAY,IAAI,CAAhB;AAEjC,oBAAW,CAAX;AAFsD;;AAGxC,MAAVE,UAAU;AAAK,WAAO,KAAK/B,MAAL,GAAc,KAAKgC,QAA1B;AAAqC;;AACxDL,KAAG,CAACM,GAAD,EAAY;AAAI,WAAO,KAAK7B,MAAL,CAAY6B,GAAG,IAAI,CAAnB,KAAyBA,GAAG,GAAG,CAA/B,GAAmC,CAA1C;AAA8C;;AACjErB,KAAG,CAACqB,GAAD,EAAcC,GAAd,EAAyB;AAC/B,UAAM;AAAE9B;AAAF,QAAa,KAAKY,OAAL,CAAaiB,GAAG,GAAG,KAAKjC,MAAX,GAAoB,CAAjC,CAAnB;AACA,UAAMmC,IAAI,GAAGF,GAAG,IAAI,CAApB;AAAA,UAAuBG,GAAG,GAAGH,GAAG,GAAG,CAAnC;AAAA,UAAsCI,GAAG,GAAGjC,MAAM,CAAC+B,IAAD,CAAN,IAAgBC,GAAhB,GAAsB,CAAlE,CAF+B,CAG/B;AACA;;AACAF,OAAG,GAAGG,GAAG,KAAK,CAAR,KAAejC,MAAM,CAAC+B,IAAD,CAAN,IAAkB,KAAKC,GAAxB,EAA+B,EAAE,KAAKJ,QAApD,CAAH,GACGK,GAAG,KAAK,CAAR,KAAejC,MAAM,CAAC+B,IAAD,CAAN,IAAgB,EAAE,KAAKC,GAAP,CAAjB,EAA+B,EAAE,KAAKJ,QAApD,CADN;AAEA,WAAO,IAAP;AACH;;AACMX,OAAK;AACR,SAAKW,QAAL,GAAgB,CAAhB;AACA,WAAO,MAAMX,KAAN,EAAP;AACH;;AAnBiE;AAsBtE;;AACA,OAAM,MAAOiB,oBAAP,SAAoCb,iBAApC,CAAiE;AACnEvB,gBAAoC;AAAA,QAAxB2B,IAAwB,uEAAjB,IAAIU,UAAJ,CAAe,CAAf,CAAiB;AAAI,UAAMV,IAAN,EAAY,CAAZ;AAAiB;;AAClDd,QAAM,CAACD,KAAD,EAAc;AACvB,WAAO,KAAKF,GAAL,CAAS,KAAKZ,MAAL,GAAc,CAAvB,EAA0Bc,KAA1B,CAAP;AACH;;AACMF,KAAG,CAACC,KAAD,EAAgBC,KAAhB,EAA6B;AACnC,UAAMU,MAAM,GAAG,KAAKxB,MAAL,GAAc,CAA7B;AACA,UAAMI,MAAM,GAAG,KAAKY,OAAL,CAAaH,KAAK,GAAGW,MAAR,GAAiB,CAA9B,EAAiCpB,MAAhD;;AACA,QAAIoB,MAAM,GAAGX,KAAK,EAAlB,EAAsB;AAClBT,YAAM,CAACoC,IAAP,CAAYpC,MAAM,CAACoB,MAAD,CAAlB,EAA4BA,MAA5B,EAAoCX,KAApC;AACH;;AACDT,UAAM,CAACS,KAAD,CAAN,GAAgBT,MAAM,CAACS,KAAK,GAAG,CAAT,CAAN,GAAoBC,KAApC;AACA,WAAO,IAAP;AACH;;AACMK,OAAK,GAAyB;AAAA,QAAxBnB,MAAwB,uEAAf,KAAKA,MAAL,GAAc,CAAC;;AACjC,QAAIA,MAAM,GAAG,KAAKA,MAAlB,EAA0B;AACtB,WAAKY,GAAL,CAASZ,MAAM,GAAG,CAAlB,EAAqB,CAArB;AACH;;AACD,WAAO,MAAMmB,KAAN,CAAYnB,MAAM,GAAG,CAArB,CAAP;AACH;;AAnBkE;AAsBvE;;AACA,OAAM,MAAOyC,iBAAP,SAA8EtC,aAA9E,CAA4G;AAKxF,MAAXuC,WAAW;AAClB,WAAO,KAAKC,YAAL,KAAsB,KAAKA,YAAL,GAAiD,KAAKvC,MAAL,YAAuBmC,UAAvB,GAAoC9C,aAApC,GAAoDC,cAA3H,CAAP;AACH;;AACMkB,KAAG,CAACC,KAAD,EAAgBC,KAAhB,EAAmC;AACzC,SAAKE,OAAL,CAAaH,KAAK,GAAG,KAAKb,MAAb,GAAsB,CAAnC;;AACA,YAAQ,OAAOc,KAAf;AACI,WAAK,QAAL;AAAe,aAAK8B,QAAL,CAAc/B,KAAd,IAAuBC,KAAvB;AAA8B;;AAC7C,WAAK,QAAL;AAAe,aAAKV,MAAL,CAAYS,KAAK,GAAG,KAAKR,MAAzB,IAAmCS,KAAnC;AAA0C;;AACzD;AAAS,aAAKV,MAAL,CAAYQ,GAAZ,CAAgBE,KAAhB,EAAqCD,KAAK,GAAG,KAAKR,MAAlD;AAHb;;AAKA,WAAO,IAAP;AACH;;AACSG,SAAO,CAACc,SAAD,EAAkB;AAC/B,UAAMO,IAAI,GAAG,MAAMrB,OAAN,CAAcc,SAAd,CAAb;;AACA,UAAMtB,MAAM,GAAG6B,IAAI,CAACpB,UAAL,IAAmB,KAAKH,iBAAL,GAAyB,KAAKD,MAAjD,CAAf;;AACA,QAAIb,eAAJ,EAAqB;AACjB,WAAKoD,QAAL,GAAgB,IAAI,KAAKF,WAAT,CAAqBb,IAAI,CAACzB,MAA1B,EAAkCyB,IAAI,CAACgB,UAAvC,EAAmD7C,MAAnD,CAAhB;AACH;;AACD,WAAO6B,IAAP;AACH;;AAxB6G","names":["memcpy","BigIntAvailable","BigInt64Array","BigUint64Array","roundLengthUpToNearest64Bytes","len","BPE","sliceOrExtendArray","arr","length","subarray","constructor","BufferBuilder","buffer","stride","BYTES_PER_ELEMENT","ArrayType","_resize","byteLength","reservedLength","reservedByteLength","set","index","value","append","reserve","extra","reserved","flush","array","clear","newLength","prototype","offset","DataBufferBuilder","last","get","BitmapBufferBuilder","data","Uint8Array","numInvalid","numValid","idx","val","byte","bit","cur","OffsetsBufferBuilder","Int32Array","fill","WideBufferBuilder","ArrayType64","_ArrayType64","buffer64","byteOffset"],"sources":["builder/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}