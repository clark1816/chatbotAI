{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport class Column extends Chunked {\n  constructor(field) {\n    let vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let offsets = arguments.length > 2 ? arguments[2] : undefined;\n    vectors = Chunked.flatten(...vectors);\n    super(field.type, vectors, offsets);\n    this._field = field;\n\n    if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n      return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n    }\n  }\n  /** @nocollapse */\n\n\n  static new(field, data) {\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n\n    const chunks = Chunked.flatten(Array.isArray(data) ? [...data, ...rest] : data instanceof Vector ? [data, ...rest] : [Vector.new(data, ...rest)]);\n\n    if (typeof field === 'string') {\n      const type = chunks[0].data.type;\n      field = new Field(field, type, true);\n    } else if (!field.nullable && chunks.some(_ref => {\n      let {\n        nullCount\n      } = _ref;\n      return nullCount > 0;\n    })) {\n      field = field.clone({\n        nullable: true\n      });\n    }\n\n    return new Column(field, chunks);\n  }\n\n  get field() {\n    return this._field;\n  }\n\n  get name() {\n    return this._field.name;\n  }\n\n  get nullable() {\n    return this._field.nullable;\n  }\n\n  get metadata() {\n    return this._field.metadata;\n  }\n\n  clone() {\n    let chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n    return new Column(this._field, chunks);\n  }\n\n  getChildAt(index) {\n    if (index < 0 || index >= this.numChildren) {\n      return null;\n    }\n\n    let columns = this._children || (this._children = []);\n    let column, field, chunks;\n\n    if (column = columns[index]) {\n      return column;\n    }\n\n    if (field = (this.type.children || [])[index]) {\n      chunks = this._chunks.map(vector => vector.getChildAt(index)).filter(vec => vec != null);\n\n      if (chunks.length > 0) {\n        return columns[index] = new Column(field, chunks);\n      }\n    }\n\n    return null;\n  }\n\n}\n/** @ignore */\n\nclass SingleChunkColumn extends Column {\n  constructor(field, vector, offsets) {\n    super(field, [vector], offsets);\n    this._chunk = vector;\n  }\n\n  search(index, then) {\n    return then ? then(this, 0, index) : [0, index];\n  }\n\n  isValid(index) {\n    return this._chunk.isValid(index);\n  }\n\n  get(index) {\n    return this._chunk.get(index);\n  }\n\n  set(index, value) {\n    this._chunk.set(index, value);\n  }\n\n  indexOf(element, offset) {\n    return this._chunk.indexOf(element, offset);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,KAAT,QAAsB,UAAtB;AAEA,SAASC,MAAT,QAAuB,UAAvB;AAGA,SAASC,OAAT,QAA4C,kBAA5C;AASA,OAAM,MAAOC,MAAP,SACMD,OADN,CACgB;AAyBlBE,cAAYC,KAAZ,EAA6E;AAAA,QAAhDC,OAAgD,uEAAzB,EAAyB;AAAA,QAArBC,OAAqB;AACzED,WAAO,GAAGJ,OAAO,CAACM,OAAR,CAAmB,GAAGF,OAAtB,CAAV;AACA,UAAMD,KAAK,CAACI,IAAZ,EAAkBH,OAAlB,EAA2BC,OAA3B;AACA,SAAKG,MAAL,GAAcL,KAAd;;AACA,QAAIC,OAAO,CAACK,MAAR,KAAmB,CAAnB,IAAwB,EAAE,gBAAgBC,iBAAlB,CAA5B,EAAkE;AAC9D,aAAO,IAAIA,iBAAJ,CAAsBP,KAAtB,EAA6BC,OAAO,CAAC,CAAD,CAApC,EAAyC,KAAKO,aAA9C,CAAP;AACH;AACJ;AAzBD;;;AACiB,SAAHC,GAAG,CAA2BT,KAA3B,EAAqDU,IAArD,EAAwH;AAAA,sCAAXC,IAAW;AAAXA,UAAW;AAAA;;AAErI,UAAMC,MAAM,GAAGf,OAAO,CAACM,OAAR,CACXU,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsB,CAAC,GAAGA,IAAJ,EAAU,GAAGC,IAAb,CAAtB,GACAD,IAAI,YAAYd,MAAhB,GAAyB,CAACc,IAAD,EAAO,GAAGC,IAAV,CAAzB,GACA,CAACf,MAAM,CAACa,GAAP,CAAWC,IAAX,EAAiB,GAAGC,IAApB,CAAD,CAHW,CAAf;;AAMA,QAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC3B,YAAMI,IAAI,GAAGQ,MAAM,CAAC,CAAD,CAAN,CAAUF,IAAV,CAAeN,IAA5B;AACAJ,WAAK,GAAG,IAAIL,KAAJ,CAAUK,KAAV,EAAiBI,IAAjB,EAAuB,IAAvB,CAAR;AACH,KAHD,MAGO,IAAI,CAACJ,KAAK,CAACe,QAAP,IAAmBH,MAAM,CAACI,IAAP,CAAY;AAAA,UAAC;AAAEC;AAAF,OAAD;AAAA,aAAmBA,SAAS,GAAG,CAA/B;AAAA,KAAZ,CAAvB,EAAsE;AACzEjB,WAAK,GAAGA,KAAK,CAACkB,KAAN,CAAY;AAAEH,gBAAQ,EAAE;AAAZ,OAAZ,CAAR;AACH;;AACD,WAAO,IAAIjB,MAAJ,CAAWE,KAAX,EAAkBY,MAAlB,CAAP;AACH;;AAce,MAALZ,KAAK;AAAK,WAAO,KAAKK,MAAZ;AAAqB;;AAC3B,MAAJc,IAAI;AAAK,WAAO,KAAKd,MAAL,CAAYc,IAAnB;AAA0B;;AAC3B,MAARJ,QAAQ;AAAK,WAAO,KAAKV,MAAL,CAAYU,QAAnB;AAA8B;;AACnC,MAARK,QAAQ;AAAK,WAAO,KAAKf,MAAL,CAAYe,QAAnB;AAA8B;;AAE/CF,OAAK,GAAsB;AAAA,QAArBN,MAAqB,uEAAZ,KAAKS,OAAO;AAC9B,WAAO,IAAIvB,MAAJ,CAAW,KAAKO,MAAhB,EAAwBO,MAAxB,CAAP;AACH;;AAEMU,YAAU,CAA2BC,KAA3B,EAAwC;AAErD,QAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAKC,WAA/B,EAA4C;AAAE,aAAO,IAAP;AAAc;;AAE5D,QAAIC,OAAO,GAAG,KAAKC,SAAL,KAAmB,KAAKA,SAAL,GAAiB,EAApC,CAAd;AACA,QAAIC,MAAJ,EAAuB3B,KAAvB,EAAwCY,MAAxC;;AAEA,QAAIe,MAAM,GAAGF,OAAO,CAACF,KAAD,CAApB,EAA6B;AAAE,aAAOI,MAAP;AAAgB;;AAC/C,QAAI3B,KAAK,GAAI,CAAC,KAAKI,IAAL,CAAUwB,QAAV,IAAsB,EAAvB,EAA2BL,KAA3B,CAAb,EAA6D;AACzDX,YAAM,GAAG,KAAKS,OAAL,CACJQ,GADI,CACCC,MAAD,IAAYA,MAAM,CAACR,UAAP,CAAqBC,KAArB,CADZ,EAEJQ,MAFI,CAEIC,GAAD,IAA2BA,GAAG,IAAI,IAFrC,CAAT;;AAGA,UAAIpB,MAAM,CAACN,MAAP,GAAgB,CAApB,EAAuB;AACnB,eAAQmB,OAAO,CAACF,KAAD,CAAP,GAAiB,IAAIzB,MAAJ,CAAcE,KAAd,EAAqBY,MAArB,CAAzB;AACH;AACJ;;AAED,WAAO,IAAP;AACH;;AAhEiB;AAmEtB;;AACA,MAAML,iBAAN,SAA0DT,MAA1D,CAAmE;AAE/DC,cAAYC,KAAZ,EAA6B8B,MAA7B,EAAgD5B,OAAhD,EAAqE;AACjE,UAAMF,KAAN,EAAa,CAAC8B,MAAD,CAAb,EAAuB5B,OAAvB;AACA,SAAK+B,MAAL,GAAcH,MAAd;AACH;;AAGMI,QAAM,CAA2CX,KAA3C,EAA0DY,IAA1D,EAAkE;AAC3E,WAAOA,IAAI,GAAGA,IAAI,CAAC,IAAD,EAAO,CAAP,EAAUZ,KAAV,CAAP,GAA0B,CAAC,CAAD,EAAIA,KAAJ,CAArC;AACH;;AACMa,SAAO,CAACb,KAAD,EAAc;AACxB,WAAO,KAAKU,MAAL,CAAYG,OAAZ,CAAoBb,KAApB,CAAP;AACH;;AACMc,KAAG,CAACd,KAAD,EAAc;AACpB,WAAO,KAAKU,MAAL,CAAYI,GAAZ,CAAgBd,KAAhB,CAAP;AACH;;AACMe,KAAG,CAACf,KAAD,EAAgBgB,KAAhB,EAAyC;AAC/C,SAAKN,MAAL,CAAYK,GAAZ,CAAgBf,KAAhB,EAAuBgB,KAAvB;AACH;;AACMC,SAAO,CAACC,OAAD,EAAuBC,MAAvB,EAAsC;AAChD,WAAO,KAAKT,MAAL,CAAYO,OAAZ,CAAoBC,OAApB,EAA6BC,MAA7B,CAAP;AACH;;AAtB8D","names":["Field","Vector","Chunked","Column","constructor","field","vectors","offsets","flatten","type","_field","length","SingleChunkColumn","_chunkOffsets","new","data","rest","chunks","Array","isArray","nullable","some","nullCount","clone","name","metadata","_chunks","getChildAt","index","numChildren","columns","_children","column","children","map","vector","filter","vec","_chunk","search","then","isValid","get","set","value","indexOf","element","offset"],"sources":["column.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}