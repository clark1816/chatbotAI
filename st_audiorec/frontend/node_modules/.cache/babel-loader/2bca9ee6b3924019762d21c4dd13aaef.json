{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MapRow } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { List } from '../type';\n/** @ignore */\n\nexport class MapVector extends BaseVector {\n  asList() {\n    const child = this.type.children[0];\n    return Vector.new(this.data.clone(new List(child)));\n  }\n\n  bind(index) {\n    const child = this.getChildAt(0);\n    const {\n      [index]: begin,\n      [index + 1]: end\n    } = this.valueOffsets;\n    return new MapRow(child.slice(begin, end));\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,SAAiCC,IAAjC,QAA6C,SAA7C;AAEA;;AACA,OAAM,MAAOC,SAAP,SAA6EF,UAA7E,CAAmG;AAC9FG,QAAM;AACT,UAAMC,KAAK,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAd;AACA,WAAOP,MAAM,CAACQ,GAAP,CAAW,KAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAIR,IAAJ,CAAuCG,KAAvC,CAAhB,CAAX,CAAP;AACH;;AACMM,MAAI,CAACC,KAAD,EAAc;AACrB,UAAMP,KAAK,GAAG,KAAKQ,UAAL,CAA8C,CAA9C,CAAd;AACA,UAAM;AAAE,OAACD,KAAD,GAASE,KAAX;AAAkB,OAACF,KAAK,GAAG,CAAT,GAAaG;AAA/B,QAAuC,KAAKC,YAAlD;AACA,WAAO,IAAIjB,MAAJ,CAAWM,KAAM,CAACY,KAAP,CAAaH,KAAb,EAAoBC,GAApB,CAAX,CAAP;AACH;;AAToG","names":["MapRow","Vector","BaseVector","List","MapVector","asList","child","type","children","new","data","clone","bind","index","getChildAt","begin","end","valueOffsets","slice"],"sources":["vector/map.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}