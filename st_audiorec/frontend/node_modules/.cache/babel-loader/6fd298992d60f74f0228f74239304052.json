{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport class JSONVectorAssembler extends Visitor {\n  /** @nocollapse */\n  static assemble() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n  }\n\n  visit(column) {\n    const {\n      data,\n      name,\n      length\n    } = column;\n    const {\n      offset,\n      nullCount,\n      nullBitmap\n    } = data;\n    const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n    const buffers = Object.assign([], data.buffers, {\n      [BufferType.VALIDITY]: undefined\n    });\n    return {\n      'name': name,\n      'count': length,\n      'VALIDITY': DataType.isNull(type) ? undefined : nullCount <= 0 ? Array.from({\n        length\n      }, () => 1) : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n      ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n    };\n  }\n\n  visitNull() {\n    return {};\n  }\n\n  visitBool(_ref) {\n    let {\n      values,\n      offset,\n      length\n    } = _ref;\n    return {\n      'DATA': [...iterateBits(values, offset, length, null, getBool)]\n    };\n  }\n\n  visitInt(vector) {\n    return {\n      'DATA': vector.type.bitWidth < 64 ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitFloat(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n\n  visitUtf8(vector) {\n    return {\n      'DATA': [...vector],\n      'OFFSET': [...vector.valueOffsets]\n    };\n  }\n\n  visitBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)],\n      OFFSET: [...vector.valueOffsets]\n    };\n  }\n\n  visitFixedSizeBinary(vector) {\n    return {\n      'DATA': [...binaryToString(vector)]\n    };\n  }\n\n  visitDate(vector) {\n    return {\n      'DATA': vector.type.unit === DateUnit.DAY ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitTimestamp(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitTime(vector) {\n    return {\n      'DATA': vector.type.unit < TimeUnit.MICROSECOND ? [...vector.values] : [...bigNumsToStrings(vector.values, 2)]\n    };\n  }\n\n  visitDecimal(vector) {\n    return {\n      'DATA': [...bigNumsToStrings(vector.values, 4)]\n    };\n  }\n\n  visitList(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitStruct(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitUnion(vector) {\n    return {\n      'TYPE': [...vector.typeIds],\n      'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitInterval(vector) {\n    return {\n      'DATA': [...vector.values]\n    };\n  }\n\n  visitFixedSizeList(vector) {\n    return {\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n  visitMap(vector) {\n    return {\n      'OFFSET': [...vector.valueOffsets],\n      'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n    };\n  }\n\n}\n/** @ignore */\n\nfunction* binaryToString(vector) {\n  for (const octets of vector) {\n    yield octets.reduce((str, byte) => {\n      return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n    }, '').toUpperCase();\n  }\n}\n/** @ignore */\n\n\nfunction* bigNumsToStrings(values, stride) {\n  for (let i = -1, n = values.length / stride; ++i < n;) {\n    yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n  }\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,EAAT,QAAmB,YAAnB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,QAA8C,SAA9C;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,OAA9B,QAA6C,aAA7C;AACA,SAASC,wBAAT,QAAyC,cAAzC;AACA,SACIC,QADJ,QAIO,SAJP;AAgCA;;AACA,OAAM,MAAOC,mBAAP,SAAmCX,OAAnC,CAA0C;AAE5C;AACsB,SAARY,QAAQ,GAAqD;AAAA,sCAAjBC,IAAiB;AAAjBA,UAAiB;AAAA;;AACvE,WAAO,IAAIF,mBAAJ,GAA0BG,SAA1B,CAAoCL,wBAAwB,CAACP,WAAD,EAAcW,IAAd,CAA5D,CAAP;AACH;;AAEME,OAAK,CAAmBC,MAAnB,EAA4B;AACpC,UAAM;AAAEC,UAAF;AAAQC,UAAR;AAAcC;AAAd,QAAyBH,MAA/B;AACA,UAAM;AAAEI,YAAF;AAAUC,eAAV;AAAqBC;AAArB,QAAoCL,IAA1C;AACA,UAAMM,IAAI,GAAGb,QAAQ,CAACc,YAAT,CAAsBR,MAAM,CAACO,IAA7B,IAAqCP,MAAM,CAACO,IAAP,CAAYE,OAAjD,GAA2DT,MAAM,CAACO,IAA/E;AACA,UAAMG,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,IAAI,CAACS,OAAvB,EAAgC;AAAE,OAACzB,UAAU,CAAC4B,QAAZ,GAAuBC;AAAzB,KAAhC,CAAhB;AACA,WAAO;AACH,cAAQZ,IADL;AAEH,eAASC,MAFN;AAGH,kBAAYT,QAAQ,CAACqB,MAAT,CAAgBR,IAAhB,IAAwBO,SAAxB,GACNT,SAAS,IAAI,CAAb,GAAiBW,KAAK,CAACC,IAAN,CAAW;AAAEd;AAAF,OAAX,EAAuB,MAAM,CAA7B,CAAjB,GACA,CAAC,GAAGb,WAAW,CAACgB,UAAD,EAAaF,MAAb,EAAqBD,MAArB,EAA6B,IAA7B,EAAmCZ,MAAnC,CAAf,CALH;AAMH,SAAG,MAAMQ,KAAN,CAAYhB,MAAM,CAACmC,GAAP,CAAWjB,IAAI,CAACkB,KAAL,CAAWZ,IAAX,EAAiBH,MAAjB,EAAyBD,MAAzB,EAAiC,CAAjC,EAAoCO,OAApC,CAAX,CAAZ;AANA,KAAP;AAQH;;AACMU,WAAS;AAAK,WAAO,EAAP;AAAY;;AAC1BC,WAAS,OAAiD;AAAA,QAAhC;AAAEC,YAAF;AAAUlB,YAAV;AAAkBD;AAAlB,KAAgC;AAC7D,WAAO;AAAE,cAAQ,CAAC,GAAGb,WAAW,CAACgC,MAAD,EAASlB,MAAT,EAAiBD,MAAjB,EAAyB,IAAzB,EAA+BX,OAA/B,CAAf;AAAV,KAAP;AACH;;AACM+B,UAAQ,CAAgBC,MAAhB,EAA4B;AACvC,WAAO;AACH,cAAQA,MAAM,CAACjB,IAAP,CAAYkB,QAAZ,GAAuB,EAAvB,GACF,CAAC,GAAGD,MAAM,CAACF,MAAX,CADE,GAEF,CAAC,GAAGI,gBAAgB,CAACF,MAAM,CAACF,MAAR,EAA8C,CAA9C,CAApB;AAHH,KAAP;AAKH;;AACMK,YAAU,CAAkBH,MAAlB,EAA8B;AAC3C,WAAO;AAAE,cAAQ,CAAC,GAAGA,MAAM,CAACF,MAAX;AAAV,KAAP;AACH;;AACMM,WAAS,CAAiBJ,MAAjB,EAA6B;AACzC,WAAO;AAAE,cAAQ,CAAC,GAAGA,MAAJ,CAAV;AAAuB,gBAAU,CAAC,GAAGA,MAAM,CAACK,YAAX;AAAjC,KAAP;AACH;;AACMC,aAAW,CAAmBN,MAAnB,EAA+B;AAC7C,WAAO;AAAE,cAAQ,CAAC,GAAGO,cAAc,CAACP,MAAD,CAAlB,CAAV;AAAuCQ,YAAM,EAAE,CAAC,GAAGR,MAAM,CAACK,YAAX;AAA/C,KAAP;AACH;;AACMI,sBAAoB,CAA4BT,MAA5B,EAAwC;AAC/D,WAAO;AAAE,cAAQ,CAAC,GAAGO,cAAc,CAACP,MAAD,CAAlB;AAAV,KAAP;AACH;;AACMU,WAAS,CAAkBV,MAAlB,EAA8B;AAC1C,WAAO;AACH,cAAQA,MAAM,CAACjB,IAAP,CAAY4B,IAAZ,KAAqB/C,QAAQ,CAACgD,GAA9B,GACF,CAAC,GAAGZ,MAAM,CAACF,MAAX,CADE,GAEF,CAAC,GAAGI,gBAAgB,CAACF,MAAM,CAACF,MAAR,EAAgB,CAAhB,CAApB;AAHH,KAAP;AAKH;;AACMe,gBAAc,CAAsBb,MAAtB,EAAkC;AACnD,WAAO;AAAE,cAAQ,CAAC,GAAGE,gBAAgB,CAACF,MAAM,CAACF,MAAR,EAAgB,CAAhB,CAApB;AAAV,KAAP;AACH;;AACMgB,WAAS,CAAiBd,MAAjB,EAA6B;AACzC,WAAO;AACH,cAAQA,MAAM,CAACjB,IAAP,CAAY4B,IAAZ,GAAmB9C,QAAQ,CAACkD,WAA5B,GACF,CAAC,GAAGf,MAAM,CAACF,MAAX,CADE,GAEF,CAAC,GAAGI,gBAAgB,CAACF,MAAM,CAACF,MAAR,EAAgB,CAAhB,CAApB;AAHH,KAAP;AAKH;;AACMkB,cAAY,CAAoBhB,MAApB,EAAgC;AAC/C,WAAO;AAAE,cAAQ,CAAC,GAAGE,gBAAgB,CAACF,MAAM,CAACF,MAAR,EAAgB,CAAhB,CAApB;AAAV,KAAP;AACH;;AACMmB,WAAS,CAAiBjB,MAAjB,EAA6B;AACzC,WAAO;AACH,gBAAU,CAAC,GAAGA,MAAM,CAACK,YAAX,CADP;AAEH,kBAAYL,MAAM,CAACjB,IAAP,CAAYmC,QAAZ,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KACjC,KAAK9C,KAAL,CAAW,IAAIjB,MAAJ,CAAW8D,CAAX,EAAc,CAACpB,MAAM,CAACsB,UAAP,CAAkBD,CAAlB,CAAD,CAAd,CAAX,CADQ;AAFT,KAAP;AAKH;;AACME,aAAW,CAAmBvB,MAAnB,EAA+B;AAC7C,WAAO;AACH,kBAAYA,MAAM,CAACjB,IAAP,CAAYmC,QAAZ,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KACjC,KAAK9C,KAAL,CAAW,IAAIjB,MAAJ,CAAW8D,CAAX,EAAc,CAACpB,MAAM,CAACsB,UAAP,CAAkBD,CAAlB,CAAD,CAAd,CAAX,CADQ;AADT,KAAP;AAIH;;AACMG,YAAU,CAAkBxB,MAAlB,EAA8B;AAC3C,WAAO;AACH,cAAQ,CAAC,GAAGA,MAAM,CAACyB,OAAX,CADL;AAEH,gBAAUzB,MAAM,CAACjB,IAAP,CAAY2C,IAAZ,KAAqB/D,SAAS,CAACgE,KAA/B,GAAuC,CAAC,GAAG3B,MAAM,CAACK,YAAX,CAAvC,GAAkEf,SAFzE;AAGH,kBAAYU,MAAM,CAACjB,IAAP,CAAYmC,QAAZ,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAU,KAAK9C,KAAL,CAAW,IAAIjB,MAAJ,CAAW8D,CAAX,EAAc,CAACpB,MAAM,CAACsB,UAAP,CAAkBD,CAAlB,CAAD,CAAd,CAAX,CAAnC;AAHT,KAAP;AAKH;;AACMO,eAAa,CAAqB5B,MAArB,EAAiC;AACjD,WAAO;AAAE,cAAQ,CAAC,GAAGA,MAAM,CAACF,MAAX;AAAV,KAAP;AACH;;AACM+B,oBAAkB,CAA0B7B,MAA1B,EAAsC;AAC3D,WAAO;AACH,kBAAYA,MAAM,CAACjB,IAAP,CAAYmC,QAAZ,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KACjC,KAAK9C,KAAL,CAAW,IAAIjB,MAAJ,CAAW8D,CAAX,EAAc,CAACpB,MAAM,CAACsB,UAAP,CAAkBD,CAAlB,CAAD,CAAd,CAAX,CADQ;AADT,KAAP;AAIH;;AACMS,UAAQ,CAAiB9B,MAAjB,EAA6B;AACxC,WAAO;AACH,gBAAU,CAAC,GAAGA,MAAM,CAACK,YAAX,CADP;AAEH,kBAAYL,MAAM,CAACjB,IAAP,CAAYmC,QAAZ,CAAqBC,GAArB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KACjC,KAAK9C,KAAL,CAAW,IAAIjB,MAAJ,CAAW8D,CAAX,EAAc,CAACpB,MAAM,CAACsB,UAAP,CAAkBD,CAAlB,CAAD,CAAd,CAAX,CADQ;AAFT,KAAP;AAKH;;AAnG2C;AAsGhD;;AACA,UAAUd,cAAV,CAAyBP,MAAzB,EAAyE;AACrE,OAAK,MAAM+B,MAAX,IAAqB/B,MAArB,EAAqD;AACjD,UAAM+B,MAAM,CAACC,MAAP,CAAc,CAACC,GAAD,EAAMC,IAAN,KAAc;AAC9B,aAAO,GAAGD,GAAG,GAAG,CAAC,MAAM,CAACC,IAAI,GAAG,IAAR,EAAcC,QAAd,CAAuB,EAAvB,CAAP,EAAmCC,KAAnC,CAAyC,CAAC,CAA1C,CAA4C,EAA5D;AACH,KAFK,EAEH,EAFG,EAECC,WAFD,EAAN;AAGH;AACJ;AAED;;;AACA,UAAUnC,gBAAV,CAA2BJ,MAA3B,EAA6DwC,MAA7D,EAA2E;AACvE,OAAK,IAAIjB,CAAC,GAAG,CAAC,CAAT,EAAYkB,CAAC,GAAGzC,MAAM,CAACnB,MAAP,GAAgB2D,MAArC,EAA6C,EAAEjB,CAAF,GAAMkB,CAAnD,GAAuD;AACnD,UAAM,GAAGlF,EAAE,CAACqC,GAAH,CAAOI,MAAM,CAAC0C,QAAP,CAAgB,CAACnB,CAAC,GAAG,CAAL,IAAUiB,MAA1B,EAAkC,CAACjB,CAAC,GAAG,CAAL,IAAUiB,MAA5C,CAAP,EAA4D,KAA5D,CAAkE,EAA3E;AACH;AACJ","names":["BN","Column","Vector","Visitor","BufferType","RecordBatch","UnionMode","DateUnit","TimeUnit","iterateBits","getBit","getBool","selectColumnChildrenArgs","DataType","JSONVectorAssembler","assemble","args","visitMany","visit","column","data","name","length","offset","nullCount","nullBitmap","type","isDictionary","indices","buffers","Object","assign","VALIDITY","undefined","isNull","Array","from","new","clone","visitNull","visitBool","values","visitInt","vector","bitWidth","bigNumsToStrings","visitFloat","visitUtf8","valueOffsets","visitBinary","binaryToString","OFFSET","visitFixedSizeBinary","visitDate","unit","DAY","visitTimestamp","visitTime","MICROSECOND","visitDecimal","visitList","children","map","f","i","getChildAt","visitStruct","visitUnion","typeIds","mode","Dense","visitInterval","visitFixedSizeList","visitMap","octets","reduce","str","byte","toString","slice","toUpperCase","stride","n","subarray"],"sources":["visitor/jsonvectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BN } from '../util/bn';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { BufferType } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { selectColumnChildrenArgs } from '../util/args';\nimport {\n    DataType,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface JSONVectorAssembler extends Visitor {\n\n    visit     <T extends Column>  (node: T  ): object;\n    visitMany <T extends Column>  (cols: T[]): object[];\n    getVisitFn<T extends DataType>(node: Column<T>): (column: Column<T>) => { name: string, count: number, VALIDITY: (0 | 1)[], DATA?: any[], OFFSET?: number[], TYPE?: number[], children?: any[] };\n\n    visitNull                 <T extends Null>            (vector: V<T>): { };\n    visitBool                 <T extends Bool>            (vector: V<T>): { DATA: boolean[] };\n    visitInt                  <T extends Int>             (vector: V<T>): { DATA: (number | string)[]  };\n    visitFloat                <T extends Float>           (vector: V<T>): { DATA: number[]  };\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitBinary               <T extends Binary>          (vector: V<T>): { DATA: string[], OFFSET: number[] };\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): { DATA: string[]  };\n    visitDate                 <T extends Date_>           (vector: V<T>): { DATA: number[]  };\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): { DATA: string[]  };\n    visitTime                 <T extends Time>            (vector: V<T>): { DATA: number[]  };\n    visitDecimal              <T extends Decimal>         (vector: V<T>): { DATA: string[]  };\n    visitList                 <T extends List>            (vector: V<T>): { children: any[], OFFSET: number[] };\n    visitStruct               <T extends Struct>          (vector: V<T>): { children: any[] };\n    visitUnion                <T extends Union>           (vector: V<T>): { children: any[], TYPE: number[],  };\n    visitInterval             <T extends Interval>        (vector: V<T>): { DATA: number[]  };\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): { children: any[] };\n    visitMap                  <T extends Map_>            (vector: V<T>): { children: any[] };\n}\n\n/** @ignore */\nexport class JSONVectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Column | RecordBatch>(...args: (T | T[])[]) {\n        return new JSONVectorAssembler().visitMany(selectColumnChildrenArgs(RecordBatch, args));\n    }\n\n    public visit<T extends Column>(column: T) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        const buffers = Object.assign([], data.buffers, { [BufferType.VALIDITY]: undefined });\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': DataType.isNull(type) ? undefined\n                : nullCount <= 0 ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    public visitNull() { return {}; }\n    public visitBool<T extends Bool>({ values, offset, length }: V<T>) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    public visitInt<T extends Int>(vector: V<T>) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values as (Int32Array | Uint32Array), 2)]\n        };\n    }\n    public visitFloat<T extends Float>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitUtf8<T extends Utf8>(vector: V<T>) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    public visitBinary<T extends Binary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    public visitFixedSizeBinary<T extends FixedSizeBinary>(vector: V<T>) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    public visitDate<T extends Date_>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitTimestamp<T extends Timestamp>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    public visitTime<T extends Time>(vector: V<T>) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    public visitDecimal<T extends Decimal>(vector: V<T>) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    public visitList<T extends List>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitStruct<T extends Struct>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitUnion<T extends Union>(vector: V<T>) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitInterval<T extends Interval>(vector: V<T>) {\n        return { 'DATA': [...vector.values] };\n    }\n    public visitFixedSizeList<T extends FixedSizeList>(vector: V<T>) {\n        return {\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n    public visitMap<T extends Map_>(vector: V<T>) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) =>\n                this.visit(new Column(f, [vector.getChildAt(i)!])))\n        };\n    }\n}\n\n/** @ignore */\nfunction* binaryToString(vector: Vector<Binary> | Vector<FixedSizeBinary>) {\n    for (const octets of vector as Iterable<Uint8Array>) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n\n/** @ignore */\nfunction* bigNumsToStrings(values: Uint32Array | Int32Array, stride: number) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield `${BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)}`;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}