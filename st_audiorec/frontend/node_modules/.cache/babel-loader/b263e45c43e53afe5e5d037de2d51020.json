{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\n\nexport class SetVisitor extends Visitor {}\n/** @ignore */\n\nconst setEpochMsToDays = (data, index, epochMs) => {\n  data[index] = epochMs / 86400000 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs % 4294967296 | 0;\n  data[index + 1] = epochMs / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000 / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n  data[index] = epochMs * 1000000 % 4294967296 | 0;\n  data[index + 1] = epochMs * 1000000 / 4294967296 | 0;\n};\n/** @ignore */\n\n\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n  const {\n    [index]: x,\n    [index + 1]: y\n  } = valueOffsets;\n\n  if (x != null && y != null) {\n    values.set(value.subarray(0, y - x), x);\n  }\n};\n/** @ignore */\n\n\nconst setBool = (_ref, index, val) => {\n  let {\n    offset,\n    values\n  } = _ref;\n  const idx = offset + index;\n  val ? values[idx >> 3] |= 1 << idx % 8 // true\n  : values[idx >> 3] &= ~(1 << idx % 8); // false\n};\n/** @ignore */\n\n\nconst setDateDay = (_ref2, index, value) => {\n  let {\n    values\n  } = _ref2;\n  setEpochMsToDays(values, index, value.valueOf());\n};\n/** @ignore */\n\n\nconst setDateMillisecond = (_ref3, index, value) => {\n  let {\n    values\n  } = _ref3;\n  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());\n};\n/** @ignore */\n\n\nconst setNumeric = (_ref4, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref4;\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setFloat16 = (_ref5, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref5;\n  values[stride * index] = float64ToUint16(value);\n};\n/** @ignore */\n\n\nconst setNumericX2 = (vector, index, value) => {\n  switch (typeof value) {\n    case 'bigint':\n      vector.values64[index] = value;\n      break;\n\n    case 'number':\n      vector.values[index * vector.stride] = value;\n      break;\n\n    default:\n      const val = value;\n      const {\n        stride,\n        ArrayType\n      } = vector;\n      const long = toArrayBufferView(ArrayType, val);\n      vector.values.set(long.subarray(0, stride), stride * index);\n  }\n};\n/** @ignore */\n\n\nconst setFixedSizeBinary = (_ref6, index, value) => {\n  let {\n    stride,\n    values\n  } = _ref6;\n  values.set(value.subarray(0, stride), stride * index);\n};\n/** @ignore */\n\n\nconst setBinary = (_ref7, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref7;\n  return setVariableWidthBytes(values, valueOffsets, index, value);\n};\n/** @ignore */\n\n\nconst setUtf8 = (_ref8, index, value) => {\n  let {\n    values,\n    valueOffsets\n  } = _ref8;\n  setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setInt = (vector, index, value) => {\n  vector.type.bitWidth < 64 ? setNumeric(vector, index, value) : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setFloat = (vector, index, value) => {\n  vector.type.precision !== Precision.HALF ? setNumeric(vector, index, value) : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\n\n\nconst setDate = (vector, index, value) => {\n  vector.type.unit === DateUnit.DAY ? setDateDay(vector, index, value) : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\n\n\nconst setTimestampSecond = (_ref9, index, value) => {\n  let {\n    values\n  } = _ref9;\n  return setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n};\n/** @ignore */\n\n\nconst setTimestampMillisecond = (_ref10, index, value) => {\n  let {\n    values\n  } = _ref10;\n  return setEpochMsToMillisecondsLong(values, index * 2, value);\n};\n/** @ignore */\n\n\nconst setTimestampMicrosecond = (_ref11, index, value) => {\n  let {\n    values\n  } = _ref11;\n  return setEpochMsToMicrosecondsLong(values, index * 2, value);\n};\n/** @ignore */\n\n\nconst setTimestampNanosecond = (_ref12, index, value) => {\n  let {\n    values\n  } = _ref12;\n  return setEpochMsToNanosecondsLong(values, index * 2, value);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setTimestamp = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimestampSecond(vector, index, value);\n\n    case TimeUnit.MILLISECOND:\n      return setTimestampMillisecond(vector, index, value);\n\n    case TimeUnit.MICROSECOND:\n      return setTimestampMicrosecond(vector, index, value);\n\n    case TimeUnit.NANOSECOND:\n      return setTimestampNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\n\n\nconst setTimeSecond = (_ref13, index, value) => {\n  let {\n    values,\n    stride\n  } = _ref13;\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setTimeMillisecond = (_ref14, index, value) => {\n  let {\n    values,\n    stride\n  } = _ref14;\n  values[stride * index] = value;\n};\n/** @ignore */\n\n\nconst setTimeMicrosecond = (_ref15, index, value) => {\n  let {\n    values\n  } = _ref15;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\n\n\nconst setTimeNanosecond = (_ref16, index, value) => {\n  let {\n    values\n  } = _ref16;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setTime = (vector, index, value) => {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return setTimeSecond(vector, index, value);\n\n    case TimeUnit.MILLISECOND:\n      return setTimeMillisecond(vector, index, value);\n\n    case TimeUnit.MICROSECOND:\n      return setTimeMicrosecond(vector, index, value);\n\n    case TimeUnit.NANOSECOND:\n      return setTimeNanosecond(vector, index, value);\n  }\n};\n/** @ignore */\n\n\nconst setDecimal = (_ref17, index, value) => {\n  let {\n    values\n  } = _ref17;\n  values.set(value.subarray(0, 4), 4 * index);\n};\n/** @ignore */\n\n\nconst setList = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n        valueOffsets = vector.valueOffsets;\n\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, value.get(++idx));\n  }\n};\n/** @ignore */\n\n\nconst setMap = (vector, index, value) => {\n  const values = vector.getChildAt(0),\n        valueOffsets = vector.valueOffsets;\n  const entries = value instanceof Map ? [...value] : Object.entries(value);\n\n  for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n    values.set(itr++, entries[++idx]);\n  }\n};\n/** @ignore */\n\n\nconst _setStructArrayValue = (o, v) => (c, _, i) => c && c.set(o, v[i]);\n/** @ignore */\n\n\nconst _setStructVectorValue = (o, v) => (c, _, i) => c && c.set(o, v.get(i));\n/** @ignore */\n\n\nconst _setStructMapValue = (o, v) => (c, f, _) => c && c.set(o, v.get(f.name));\n/** @ignore */\n\n\nconst _setStructObjectValue = (o, v) => (c, f, _) => c && c.set(o, v[f.name]);\n/** @ignore */\n\n\nconst setStruct = (vector, index, value) => {\n  const setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);\n  vector.type.children.forEach((f, i) => setValue(vector.getChildAt(i), f, i));\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setUnion = (vector, index, value) => {\n  vector.type.mode === UnionMode.Dense ? setDenseUnion(vector, index, value) : setSparseUnion(vector, index, value);\n};\n/** @ignore */\n\n\nconst setDenseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\n\n\nconst setSparseUnion = (vector, index, value) => {\n  const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  const child = vector.getChildAt(childIndex);\n  child && child.set(index, value);\n};\n/** @ignore */\n\n\nconst setDictionary = (vector, index, value) => {\n  const key = vector.getKey(index);\n\n  if (key !== null) {\n    vector.setValue(key, value);\n  }\n};\n/* istanbul ignore next */\n\n/** @ignore */\n\n\nconst setIntervalValue = (vector, index, value) => {\n  vector.type.unit === IntervalUnit.DAY_TIME ? setIntervalDayTime(vector, index, value) : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\n\n\nconst setIntervalDayTime = (_ref18, index, value) => {\n  let {\n    values\n  } = _ref18;\n  values.set(value.subarray(0, 2), 2 * index);\n};\n/** @ignore */\n\n\nconst setIntervalYearMonth = (_ref19, index, value) => {\n  let {\n    values\n  } = _ref19;\n  values[index] = value[0] * 12 + value[1] % 12;\n};\n/** @ignore */\n\n\nconst setFixedSizeList = (vector, index, value) => {\n  const child = vector.getChildAt(0),\n        {\n    stride\n  } = vector;\n\n  for (let idx = -1, offset = index * stride; ++idx < stride;) {\n    child.set(offset + idx, value.get(idx));\n  }\n};\n\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = setDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setStruct;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setMap;\n/** @ignore */\n\nexport const instance = new SetVisitor();","map":{"version":3,"mappings":"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","names":["Vector","Visitor","encodeUtf8","float64ToUint16","toArrayBufferView","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","SetVisitor","setEpochMsToDays","data","index","epochMs","setEpochMsToMillisecondsLong","setEpochMsToMicrosecondsLong","setEpochMsToNanosecondsLong","setVariableWidthBytes","values","valueOffsets","value","x","y","set","subarray","setBool","val","offset","idx","setDateDay","valueOf","setDateMillisecond","setNumeric","stride","setFloat16","setNumericX2","vector","values64","ArrayType","long","setFixedSizeBinary","setBinary","setUtf8","setInt","type","bitWidth","setFloat","precision","HALF","setDate","unit","DAY","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setTime","setDecimal","setList","getChildAt","itr","end","get","setMap","entries","Map","Object","_setStructArrayValue","o","v","c","_","i","_setStructVectorValue","_setStructMapValue","f","name","_setStructObjectValue","setStruct","setValue","Array","isArray","children","forEach","setUnion","mode","Dense","setDenseUnion","setSparseUnion","childIndex","typeIdToChildIndex","typeIds","child","setDictionary","key","getKey","setIntervalValue","DAY_TIME","setIntervalDayTime","setIntervalYearMonth","setFixedSizeList","prototype","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/set.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n"]},"metadata":{},"sourceType":"module"}