{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\n\nexport class RandomAccessFile extends ByteStream {\n  constructor(buffer, byteLength) {\n    super();\n    this.position = 0;\n    this.buffer = toUint8Array(buffer);\n    this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n  }\n\n  readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n\n  seek(position) {\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n\n  read(nBytes) {\n    const {\n      buffer,\n      size,\n      position\n    } = this;\n\n    if (buffer && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n\n      this.position = Math.min(size, position + Math.min(size - position, nBytes));\n      return buffer.subarray(position, this.position);\n    }\n\n    return null;\n  }\n\n  readAt(position, nBytes) {\n    const buf = this.buffer;\n    const end = Math.min(this.size, position + nBytes);\n    return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n  }\n\n  close() {\n    this.buffer && (this.buffer = null);\n  }\n\n  throw(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n  return(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n}\n/** @ignore */\n\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n  constructor(file, byteLength) {\n    super();\n    this.position = 0;\n    this._handle = file;\n\n    if (typeof byteLength === 'number') {\n      this.size = byteLength;\n    } else {\n      this._pending = (async () => {\n        this.size = (await file.stat()).size;\n        delete this._pending;\n      })();\n    }\n  }\n\n  async readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = await this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n\n  async seek(position) {\n    this._pending && (await this._pending);\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n\n  async read(nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size,\n      position\n    } = this;\n\n    if (file && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n\n      let pos = position,\n          offset = 0,\n          bytesRead = 0;\n      let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n      let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n\n      while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n        ({\n          bytesRead\n        } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n      }\n\n      return buffer;\n    }\n\n    return null;\n  }\n\n  async readAt(position, nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size\n    } = this;\n\n    if (file && position + nBytes < size) {\n      const end = Math.min(size, position + nBytes);\n      const buffer = new Uint8Array(end - position);\n      return (await file.read(buffer, 0, nBytes, position)).buffer;\n    }\n\n    return new Uint8Array(nBytes);\n  }\n\n  async close() {\n    const f = this._handle;\n    this._handle = null;\n    f && (await f.close());\n  }\n\n  async throw(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n  async return(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ByteStream","AsyncByteStream","toUint8Array","RandomAccessFile","constructor","buffer","byteLength","size","readInt32","position","byteOffset","readAt","DataView","getInt32","seek","Math","min","read","nBytes","Infinity","subarray","buf","end","Uint8Array","close","throw","value","done","return","AsyncRandomAccessFile","file","_handle","_pending","stat","pos","offset","bytesRead","max","f"],"sources":["io/file.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n"]},"metadata":{},"sourceType":"module"}