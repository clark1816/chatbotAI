{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\n\nexport class ListBuilder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._run = new Run();\n    this._offsets = new OffsetsBufferBuilder();\n  }\n\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n\n    this.children[this.numChildren] = child;\n    this.type = new List(new Field(name, child.type, true));\n    return this.numChildren - 1;\n  }\n\n  clear() {\n    this._run.clear();\n\n    return super.clear();\n  }\n\n  _flushPending(pending) {\n    const run = this._run;\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    let index = 0,\n        value;\n\n    for ([index, value] of pending) {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.length);\n        setValue(this, index, run.bind(value));\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,OAApB;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,SAAmBC,IAAnB,QAA+B,SAA/B;AACA,SAASC,oBAAT,QAAqC,UAArC;AACA,SAAkCC,oBAAlC,QAA8D,YAA9D;AAEA;;AACA,OAAM,MAAOC,WAAP,SAAkED,oBAAlE,CAAsG;AAGxGE,cAAYC,IAAZ,EAAgD;AAC5C,UAAMA,IAAN;AAHM,gBAAO,IAAIP,GAAJ,EAAP;AAIN,SAAKQ,QAAL,GAAgB,IAAIL,oBAAJ,EAAhB;AACH;;AACMM,UAAQ,CAACC,KAAD,EAA8B;AAAA,QAAVC,IAAU,uEAAH,GAAG;;AACzC,QAAI,KAAKC,WAAL,GAAmB,CAAvB,EAA0B;AACtB,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACH;;AACD,SAAKC,QAAL,CAAc,KAAKF,WAAnB,IAAkCF,KAAlC;AACA,SAAKK,IAAL,GAAY,IAAIb,IAAJ,CAAS,IAAID,KAAJ,CAAUU,IAAV,EAAgBD,KAAK,CAACK,IAAtB,EAA4B,IAA5B,CAAT,CAAZ;AACA,WAAO,KAAKH,WAAL,GAAmB,CAA1B;AACH;;AACMI,OAAK;AACR,SAAKC,IAAL,CAAUD,KAAV;;AACA,WAAO,MAAMA,KAAN,EAAP;AACH;;AACSE,eAAa,CAACC,OAAD,EAA8C;AACjE,UAAMC,GAAG,GAAG,KAAKH,IAAjB;AACA,UAAMI,OAAO,GAAG,KAAKb,QAArB;AACA,UAAMc,QAAQ,GAAG,KAAKC,SAAtB;AACA,QAAIC,KAAK,GAAG,CAAZ;AAAA,QAAeC,KAAf;;AACA,SAAK,CAACD,KAAD,EAAQC,KAAR,CAAL,IAAuBN,OAAvB,EAAgC;AAC5B,UAAIM,KAAK,KAAKC,SAAd,EAAyB;AACrBL,eAAO,CAACM,GAAR,CAAYH,KAAZ,EAAmB,CAAnB;AACH,OAFD,MAEO;AACHH,eAAO,CAACM,GAAR,CAAYH,KAAZ,EAAmBC,KAAK,CAACG,MAAzB;AACAN,gBAAQ,CAAC,IAAD,EAAOE,KAAP,EAAcJ,GAAG,CAACS,IAAJ,CAASJ,KAAT,CAAd,CAAR;AACH;AACJ;AACJ;;AAhCuG","names":["Run","Field","List","OffsetsBufferBuilder","VariableWidthBuilder","ListBuilder","constructor","opts","_offsets","addChild","child","name","numChildren","Error","children","type","clear","_run","_flushPending","pending","run","offsets","setValue","_setValue","index","value","undefined","set","length","bind"],"sources":["builder/list.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}