{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\n\nexport class AsyncByteQueue extends AsyncQueue {\n  write(value) {\n    if ((value = toUint8Array(value)).byteLength > 0) {\n      return super.write(value);\n    }\n  }\n\n  toString() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);\n  }\n\n  toUint8Array() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return sync ? joinUint8Arrays(this._values)[0] : (async () => {\n      let buffers = [],\n          byteLength = 0;\n\n      for await (const chunk of this) {\n        buffers.push(chunk);\n        byteLength += chunk.byteLength;\n      }\n\n      return joinUint8Arrays(buffers, byteLength)[0];\n    })();\n  }\n\n}\n/** @ignore */\n\nexport class ByteStream {\n  constructor(source) {\n    if (source) {\n      this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  next(value) {\n    return this.source.next(value);\n  }\n\n  throw(value) {\n    return this.source.throw(value);\n  }\n\n  return(value) {\n    return this.source.return(value);\n  }\n\n  peek(size) {\n    return this.source.peek(size);\n  }\n\n  read(size) {\n    return this.source.read(size);\n  }\n\n}\n/** @ignore */\n\nexport class AsyncByteStream {\n  constructor(source) {\n    if (source instanceof AsyncByteStream) {\n      this.source = source.source;\n    } else if (source instanceof AsyncByteQueue) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isReadableNodeStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n    } else if (isReadableDOMStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n    } else if (isFetchResponse(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n    } else if (isIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n    } else if (isPromise(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isAsyncIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  next(value) {\n    return this.source.next(value);\n  }\n\n  throw(value) {\n    return this.source.throw(value);\n  }\n\n  return(value) {\n    return this.source.return(value);\n  }\n\n  get closed() {\n    return this.source.closed;\n  }\n\n  cancel(reason) {\n    return this.source.cancel(reason);\n  }\n\n  peek(size) {\n    return this.source.peek(size);\n  }\n\n  read(size) {\n    return this.source.read(size);\n  }\n\n}\n/** @ignore */\n\nclass ByteStreamSource {\n  constructor(source) {\n    this.source = source;\n  }\n\n  cancel(reason) {\n    this.return(reason);\n  }\n\n  peek(size) {\n    return this.next(size, 'peek').value;\n  }\n\n  read(size) {\n    return this.next(size, 'read').value;\n  }\n\n  next(size) {\n    let cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';\n    return this.source.next({\n      cmd,\n      size\n    });\n  }\n\n  throw(value) {\n    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);\n  }\n\n  return(value) {\n    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);\n  }\n\n}\n/** @ignore */\n\n\nclass AsyncByteStreamSource {\n  constructor(source) {\n    this.source = source;\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n\n  async cancel(reason) {\n    await this.return(reason);\n  }\n\n  get closed() {\n    return this._closedPromise;\n  }\n\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n\n  async next(size) {\n    let cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';\n    return await this.source.next({\n      cmd,\n      size\n    });\n  }\n\n  async throw(value) {\n    const result = this.source.throw && (await this.source.throw(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n\n  async return(value) {\n    const result = this.source.return && (await this.source.return(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["streamAdapters","decodeUtf8","ITERATOR_DONE","AsyncQueue","toUint8Array","joinUint8Arrays","isPromise","isFetchResponse","isIterable","isAsyncIterable","isReadableDOMStream","isReadableNodeStream","AsyncByteQueue","write","value","byteLength","toString","sync","then","_values","buffers","chunk","push","ByteStream","constructor","source","ByteStreamSource","fromIterable","Symbol","iterator","next","throw","return","peek","size","read","AsyncByteStream","AsyncByteStreamSource","fromAsyncIterable","fromNodeStream","fromDOMStream","body","asyncIterator","closed","cancel","reason","cmd","Object","create","_closedPromise","Promise","r","_closedPromiseResolve","result","undefined"],"sources":["io/stream.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}