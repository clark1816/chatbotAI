{"ast":null,"code":"// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        let MessageHeader;\n\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class FieldNode {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * The number of value slots in the Arrow array at this level of a nested\n           * tree\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            return this.bb.readInt64(this.bb_pos);\n          }\n          /**\n           * The number of observed nulls. Fields with null_count == 0 may choose not\n           * to write their physical validity bitmap out as a materialized buffer,\n           * instead setting the length of the bitmap buffer to 0.\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          nullCount() {\n            return this.bb.readInt64(this.bb_pos + 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           * @param flatbuffers.Long null_count\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createFieldNode(builder, length, null_count) {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n          }\n\n        }\n\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class RecordBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param RecordBatch= obj\n           * @returns RecordBatch\n           */\n\n\n          static getRootAsRecordBatch(bb, obj) {\n            return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * number of records / rows. The arrays in the batch should all have this\n           * length\n           *\n           * @returns flatbuffers.Long\n           */\n\n\n          length() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * Nodes correspond to the pre-ordered flattened logical schema\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.FieldNode= obj\n           * @returns org.apache.arrow.flatbuf.FieldNode\n           */\n\n\n          nodes(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          nodesLength() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * Buffers correspond to the pre-ordered flattened buffer tree\n           *\n           * The number of buffers appended to this list depends on the schema. For\n           * example, most primitive arrays will have 2 buffers, 1 for the validity\n           * bitmap and 1 for the values. For struct arrays, there will only be a\n           * single buffer for the validity (nulls) bitmap\n           *\n           * @param number index\n           * @param org.apache.arrow.flatbuf.Buffer= obj\n           * @returns org.apache.arrow.flatbuf.Buffer\n           */\n\n\n          buffers(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          buffersLength() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startRecordBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long length\n           */\n\n\n          static addLength(builder, length) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset nodesOffset\n           */\n\n\n          static addNodes(builder, nodesOffset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startNodesVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset buffersOffset\n           */\n\n\n          static addBuffers(builder, buffersOffset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startBuffersVector(builder, numElems) {\n            builder.startVector(16, numElems, 8);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endRecordBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n          }\n\n        }\n\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class DictionaryBatch {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param DictionaryBatch= obj\n           * @returns DictionaryBatch\n           */\n\n\n          static getRootAsDictionaryBatch(bb, obj) {\n            return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n\n\n          id() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param org.apache.arrow.flatbuf.RecordBatch= obj\n           * @returns org.apache.arrow.flatbuf.RecordBatch|null\n           */\n\n\n          data(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n          }\n          /**\n           * If isDelta is true the values in the dictionary are to be appended to a\n           * dictionary with the indicated id\n           *\n           * @returns boolean\n           */\n\n\n          isDelta() {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startDictionaryBatch(builder) {\n            builder.startObject(3);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long id\n           */\n\n\n          static addId(builder, id) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset dataOffset\n           */\n\n\n          static addData(builder, dataOffset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param boolean isDelta\n           */\n\n\n          static addIsDelta(builder, isDelta) {\n            builder.addFieldInt8(2, +isDelta, +false);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endDictionaryBatch(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n\n          static createDictionaryBatch(builder, id, dataOffset, isDelta) {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n          }\n\n        }\n\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n\n\n(function (org) {\n  var apache;\n\n  (function (apache) {\n    var arrow;\n\n    (function (arrow) {\n      var flatbuf;\n\n      (function (flatbuf) {\n        class Message {\n          constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n\n\n          __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n          }\n          /**\n           * @param flatbuffers.ByteBuffer bb\n           * @param Message= obj\n           * @returns Message\n           */\n\n\n          static getRootAsMessage(bb, obj) {\n            return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MetadataVersion\n           */\n\n\n          version() {\n            let offset = this.bb.__offset(this.bb_pos, 4);\n\n            return offset ?\n            /**  */\n            this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n          }\n          /**\n           * @returns org.apache.arrow.flatbuf.MessageHeader\n           */\n\n\n          headerType() {\n            let offset = this.bb.__offset(this.bb_pos, 6);\n\n            return offset ?\n            /**  */\n            this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n          }\n          /**\n           * @param flatbuffers.Table obj\n           * @returns ?flatbuffers.Table\n           */\n\n\n          header(obj) {\n            let offset = this.bb.__offset(this.bb_pos, 8);\n\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n          }\n          /**\n           * @returns flatbuffers.Long\n           */\n\n\n          bodyLength() {\n            let offset = this.bb.__offset(this.bb_pos, 10);\n\n            return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n          }\n          /**\n           * @param number index\n           * @param org.apache.arrow.flatbuf.KeyValue= obj\n           * @returns org.apache.arrow.flatbuf.KeyValue\n           */\n\n\n          customMetadata(index, obj) {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n          }\n          /**\n           * @returns number\n           */\n\n\n          customMetadataLength() {\n            let offset = this.bb.__offset(this.bb_pos, 12);\n\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           */\n\n\n          static startMessage(builder) {\n            builder.startObject(5);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MetadataVersion version\n           */\n\n\n          static addVersion(builder, version) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param org.apache.arrow.flatbuf.MessageHeader headerType\n           */\n\n\n          static addHeaderType(builder, headerType) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset headerOffset\n           */\n\n\n          static addHeader(builder, headerOffset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Long bodyLength\n           */\n\n\n          static addBodyLength(builder, bodyLength) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset customMetadataOffset\n           */\n\n\n          static addCustomMetadata(builder, customMetadataOffset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param Array.<flatbuffers.Offset> data\n           * @returns flatbuffers.Offset\n           */\n\n\n          static createCustomMetadataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n\n            for (let i = data.length - 1; i >= 0; i--) {\n              builder.addOffset(data[i]);\n            }\n\n            return builder.endVector();\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param number numElems\n           */\n\n\n          static startCustomMetadataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @returns flatbuffers.Offset\n           */\n\n\n          static endMessage(builder) {\n            let offset = builder.endObject();\n            return offset;\n          }\n          /**\n           * @param flatbuffers.Builder builder\n           * @param flatbuffers.Offset offset\n           */\n\n\n          static finishMessageBuffer(builder, offset) {\n            builder.finish(offset);\n          }\n\n          static createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n          }\n\n        }\n\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"mappings":"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","names":["NS7624605610262437867","org","flatbuf","apache","arrow","Schema","MessageHeader","FieldNode","constructor","__init","i","bb","bb_pos","length","readInt64","nullCount","createFieldNode","builder","null_count","prep","writeInt64","offset","RecordBatch","getRootAsRecordBatch","obj","readInt32","position","__offset","createLong","nodes","index","__vector","nodesLength","__vector_len","buffers","Buffer","buffersLength","startRecordBatch","startObject","addLength","addFieldInt64","addNodes","nodesOffset","addFieldOffset","startNodesVector","numElems","startVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","endObject","createRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","id","data","__indirect","isDelta","readInt8","startDictionaryBatch","addId","addData","dataOffset","addIsDelta","addFieldInt8","endDictionaryBatch","createDictionaryBatch","Message","getRootAsMessage","version","readInt16","MetadataVersion","V1","headerType","readUint8","NONE","header","__union","bodyLength","customMetadata","KeyValue","customMetadataLength","startMessage","addVersion","addFieldInt16","addHeaderType","addHeader","headerOffset","addBodyLength","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","addOffset","endVector","startCustomMetadataVector","endMessage","finishMessageBuffer","finish","createMessage"],"sources":["fb/Message.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}