{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType } from '../type';\n/** @ignore */\n\nexport class VectorAssembler extends Visitor {\n  constructor() {\n    super();\n    this._byteLength = 0;\n    this._nodes = [];\n    this._buffers = [];\n    this._bufferRegions = [];\n  }\n  /** @nocollapse */\n\n\n  static assemble() {\n    const assembler = new VectorAssembler();\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n    const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n    return assembleResult;\n  }\n\n  visit(vector) {\n    if (!DataType.isDictionary(vector.type)) {\n      const {\n        data,\n        length,\n        nullCount\n      } = vector;\n\n      if (length > 2147483647) {\n        /* istanbul ignore next */\n        throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n      }\n\n      if (!DataType.isNull(vector.type)) {\n        addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer\n        : truncateBitmap(data.offset, length, data.nullBitmap));\n      }\n\n      this.nodes.push(new FieldNode(length, nullCount));\n    }\n\n    return super.visit(vector);\n  }\n\n  visitNull(_nullV) {\n    return this;\n  }\n\n  visitDictionary(vector) {\n    // Assemble the indices here, Dictionary assembled separately.\n    return this.visit(vector.indices);\n  }\n\n  get nodes() {\n    return this._nodes;\n  }\n\n  get buffers() {\n    return this._buffers;\n  }\n\n  get byteLength() {\n    return this._byteLength;\n  }\n\n  get bufferRegions() {\n    return this._bufferRegions;\n  }\n\n}\n/** @ignore */\n\nfunction addBuffer(values) {\n  const byteLength = values.byteLength + 7 & ~7; // Round up to a multiple of 8\n\n  this.buffers.push(values);\n  this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n  this._byteLength += byteLength;\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleUnion(vector) {\n  const {\n    type,\n    length,\n    typeIds,\n    valueOffsets\n  } = vector; // All Union Vectors have a typeIds buffer\n\n  addBuffer.call(this, typeIds); // If this is a Sparse Union, treat it like all other Nested types\n\n  if (type.mode === UnionMode.Sparse) {\n    return assembleNestedVector.call(this, vector);\n  } else if (type.mode === UnionMode.Dense) {\n    // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n    if (vector.offset <= 0) {\n      // If the Vector hasn't been sliced, write the existing valueOffsets\n      addBuffer.call(this, valueOffsets); // We can treat this like all other Nested types\n\n      return assembleNestedVector.call(this, vector);\n    } else {\n      // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n      // each child vector, we need to \"rebase\" the valueOffsets for each child\n      // Union typeIds are not necessary 0-indexed\n      const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n      const childLengths = new Int32Array(maxChildTypeId + 1); // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n\n      const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n      const shiftedOffsets = new Int32Array(length); // If we have a non-zero offset, then the value offsets do not start at\n      // zero. We must a) create a new offsets array with shifted offsets and\n      // b) slice the values array accordingly\n\n      const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n\n      for (let typeId, shift, index = -1; ++index < length;) {\n        if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n          shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n        }\n\n        shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n        ++childLengths[typeId];\n      }\n\n      addBuffer.call(this, shiftedOffsets); // Slice and visit children accordingly\n\n      for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n        if (child = vector.getChildAt(childIndex)) {\n          const typeId = type.typeIds[childIndex];\n          const childLength = Math.min(length, childLengths[typeId]);\n          this.visit(child.slice(childOffsets[typeId], childLength));\n        }\n      }\n    }\n  }\n\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleBoolVector(vector) {\n  // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n  let values;\n\n  if (vector.nullCount >= vector.length) {\n    // If all values are null, just insert a placeholder empty data buffer (fastest path)\n    return addBuffer.call(this, new Uint8Array(0));\n  } else if ((values = vector.values) instanceof Uint8Array) {\n    // If values is already a Uint8Array, slice the bitmap (fast path)\n    return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n  } // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n  // values as bools and re-pack them into a Uint8Array. This code isn't\n  // reachable unless you're trying to manipulate the Data internals,\n  // we we're only doing this for safety.\n\n  /* istanbul ignore next */\n\n\n  return addBuffer.call(this, packBools(vector));\n}\n/** @ignore */\n\n\nfunction assembleFlatVector(vector) {\n  return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n/** @ignore */\n\n\nfunction assembleFlatListVector(vector) {\n  const {\n    length,\n    values,\n    valueOffsets\n  } = vector;\n  const firstOffset = valueOffsets[0];\n  const lastOffset = valueOffsets[length];\n  const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset); // Push in the order FlatList types read their buffers\n\n  addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n\n  addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n\n  return this;\n}\n/** @ignore */\n\n\nfunction assembleListVector(vector) {\n  const {\n    length,\n    valueOffsets\n  } = vector; // If we have valueOffsets (MapVector, ListVector), push that buffer first\n\n  if (valueOffsets) {\n    addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n  } // Then insert the List's values child\n\n\n  return this.visit(vector.getChildAt(0));\n}\n/** @ignore */\n\n\nfunction assembleNestedVector(vector) {\n  return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;","map":{"version":3,"mappings":"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","names":["Visitor","UnionMode","RecordBatch","rebaseValueOffsets","packBools","truncateBitmap","selectVectorChildrenArgs","BufferRegion","FieldNode","DataType","VectorAssembler","constructor","assemble","assembler","args","vectorChildren","assembleResult","visitMany","visit","vector","isDictionary","type","data","length","nullCount","RangeError","isNull","addBuffer","call","Uint8Array","offset","nullBitmap","nodes","push","visitNull","_nullV","visitDictionary","indices","_nodes","buffers","_buffers","byteLength","_byteLength","bufferRegions","_bufferRegions","values","assembleUnion","typeIds","valueOffsets","mode","Sparse","assembleNestedVector","Dense","maxChildTypeId","reduce","x","y","Math","max","childLengths","Int32Array","childOffsets","fill","shiftedOffsets","unshiftedOffsets","typeId","shift","index","child","childIndex","numChildren","children","getChildAt","childLength","min","slice","assembleBoolVector","assembleFlatVector","subarray","stride","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","map","_","i","filter","Boolean","prototype","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitInterval","visitFixedSizeList","visitMap"],"sources":["visitor/vectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n"]},"metadata":{},"sourceType":"module"}