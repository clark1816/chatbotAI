{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Chunked, StructVector } from './vector/index';\nexport class Table extends Chunked {\n  constructor() {\n    let schema = null;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args[0] instanceof Schema) {\n      schema = args.shift();\n    }\n\n    let chunks = selectArgs(RecordBatch, args);\n\n    if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n      throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n    }\n\n    chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n    super(new Struct(schema.fields), chunks);\n    this._schema = schema;\n    this._chunks = chunks;\n  }\n  /** @nocollapse */\n\n\n  static empty() {\n    let schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Schema([]);\n    return new Table(schema, []);\n  }\n  /** @nocollapse */\n\n\n  static from(input) {\n    if (!input) {\n      return Table.empty();\n    }\n\n    if (typeof input === 'object') {\n      let table = isIterable(input['values']) ? tableFromIterable(input) : isAsyncIterable(input['values']) ? tableFromAsyncIterable(input) : null;\n\n      if (table !== null) {\n        return table;\n      }\n    }\n\n    let reader = RecordBatchReader.from(input);\n\n    if (isPromise(reader)) {\n      return (async () => await Table.from(await reader))();\n    }\n\n    if (reader.isSync() && (reader = reader.open())) {\n      return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);\n    }\n\n    return (async opening => {\n      const reader = await opening;\n      const schema = reader.schema;\n      const batches = [];\n\n      if (schema) {\n        for await (let batch of reader) {\n          batches.push(batch);\n        }\n\n        return new Table(schema, batches);\n      }\n\n      return Table.empty();\n    })(reader.open());\n  }\n  /** @nocollapse */\n\n\n  static async fromAsync(source) {\n    return await Table.from(source);\n  }\n  /** @nocollapse */\n\n\n  static fromStruct(vector) {\n    return Table.new(vector.data.childData, vector.type.children);\n  }\n  /** @nocollapse */\n\n\n  static new() {\n    for (var _len2 = arguments.length, cols = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      cols[_key2] = arguments[_key2];\n    }\n\n    return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n  }\n\n  get schema() {\n    return this._schema;\n  }\n\n  get length() {\n    return this._length;\n  }\n\n  get chunks() {\n    return this._chunks;\n  }\n\n  get numCols() {\n    return this._numChildren;\n  }\n\n  clone() {\n    let chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n    return new Table(this._schema, chunks);\n  }\n\n  getColumn(name) {\n    return this.getColumnAt(this.getColumnIndex(name));\n  }\n\n  getColumnAt(index) {\n    return this.getChildAt(index);\n  }\n\n  getColumnIndex(name) {\n    return this._schema.fields.findIndex(f => f.name === name);\n  }\n\n  getChildAt(index) {\n    if (index < 0 || index >= this.numChildren) {\n      return null;\n    }\n\n    let field, child;\n    const fields = this._schema.fields;\n    const columns = this._children || (this._children = []);\n\n    if (child = columns[index]) {\n      return child;\n    }\n\n    if (field = fields[index]) {\n      const chunks = this._chunks.map(chunk => chunk.getChildAt(index)).filter(vec => vec != null);\n\n      if (chunks.length > 0) {\n        return columns[index] = new Column(field, chunks);\n      }\n    }\n\n    return null;\n  } // @ts-ignore\n\n\n  serialize() {\n    let encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'binary';\n    let stream = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const Writer = !stream ? RecordBatchFileWriter : RecordBatchStreamWriter;\n    return Writer.writeAll(this).toUint8Array(true);\n  }\n\n  count() {\n    return this._length;\n  }\n\n  select() {\n    const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n\n    for (var _len3 = arguments.length, columnNames = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      columnNames[_key3] = arguments[_key3];\n    }\n\n    return this.selectAt(...columnNames.map(columnName => nameToIndex.get(columnName)).filter(x => x > -1));\n  }\n\n  selectAt() {\n    for (var _len4 = arguments.length, columnIndices = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      columnIndices[_key4] = arguments[_key4];\n    }\n\n    const schema = this._schema.selectAt(...columnIndices);\n\n    return new Table(schema, this._chunks.map(_ref => {\n      let {\n        length,\n        data: {\n          childData\n        }\n      } = _ref;\n      return new RecordBatch(schema, length, columnIndices.map(i => childData[i]).filter(Boolean));\n    }));\n  }\n\n  assign(other) {\n    var _this = this;\n\n    const fields = this._schema.fields;\n    const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n      const [indices, oldToNew] = memo;\n      const i = fields.findIndex(f => f.name === f2.name);\n      ~i ? oldToNew[i] = newIdx : indices.push(newIdx);\n      return memo;\n    }, [[], []]);\n\n    const schema = this._schema.assign(other.schema);\n\n    const columns = [...fields.map(function (_f, i, _fs) {\n      let j = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : oldToNew[i];\n      return j === undefined ? _this.getColumnAt(i) : other.getColumnAt(j);\n    }), ...indices.map(i => other.getColumnAt(i))].filter(Boolean);\n    return new Table(...distributeVectorsIntoRecordBatches(schema, columns));\n  }\n\n}\n\nfunction tableFromIterable(input) {\n  const {\n    type\n  } = input;\n\n  if (type instanceof Struct) {\n    return Table.fromStruct(StructVector.from(input));\n  }\n\n  return null;\n}\n\nfunction tableFromAsyncIterable(input) {\n  const {\n    type\n  } = input;\n\n  if (type instanceof Struct) {\n    return StructVector.from(input).then(vector => Table.fromStruct(vector));\n  }\n\n  return null;\n}","map":{"version":3,"mappings":"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","names":["Column","Schema","RecordBatch","_InternalEmptyPlaceholderRecordBatch","RecordBatchReader","Struct","selectColumnArgs","selectArgs","isPromise","isIterable","isAsyncIterable","RecordBatchFileWriter","RecordBatchStreamWriter","distributeColumnsIntoRecordBatches","distributeVectorsIntoRecordBatches","Chunked","StructVector","Table","constructor","schema","args","shift","chunks","TypeError","fields","_schema","_chunks","empty","from","input","table","tableFromIterable","tableFromAsyncIterable","reader","isSync","open","opening","batches","batch","push","fromAsync","source","fromStruct","vector","new","data","childData","type","children","cols","length","_length","numCols","_numChildren","clone","getColumn","name","getColumnAt","getColumnIndex","index","getChildAt","findIndex","f","numChildren","field","child","columns","_children","map","chunk","filter","vec","serialize","encoding","stream","Writer","writeAll","toUint8Array","count","select","nameToIndex","reduce","m","i","set","Map","columnNames","selectAt","columnName","get","x","columnIndices","Boolean","assign","other","indices","oldToNew","memo","f2","newIdx","_f","_fs","j","undefined","then"],"sources":["table.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n"]},"metadata":{},"sourceType":"module"}