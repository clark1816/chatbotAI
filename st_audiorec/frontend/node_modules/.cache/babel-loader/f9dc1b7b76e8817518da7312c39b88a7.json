{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\n\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\n\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\n\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\n\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\n\nexport class DataFrame extends Table {\n  filter(predicate) {\n    return new FilteredDataFrame(this.chunks, predicate);\n  }\n\n  scan(next, bind) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      if (bind) {\n        bind(batch);\n      } // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        next(index, batch);\n      }\n    }\n  }\n\n  scanReverse(next, bind) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      if (bind) {\n        bind(batch);\n      } // yield all indices\n\n\n      for (let index = batch.length; --index >= 0;) {\n        next(index, batch);\n      }\n    }\n  }\n\n  countBy(name) {\n    const batches = this.chunks,\n          numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex]; // rebind the countBy Col\n\n      count_by.bind(batch);\n      const keys = count_by.vector.indices; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n\n        if (key !== null) {\n          counts[key]++;\n        }\n      }\n    }\n\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n\n}\n/** @ignore */\n\nexport class CountByResult extends Table {\n  constructor(values, counts) {\n    const schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    super(new RecordBatch(schema, counts.length, [values, counts]));\n  }\n\n  toJSON() {\n    const values = this.getColumnAt(0);\n    const counts = this.getColumnAt(1);\n    const result = {};\n\n    for (let i = -1; ++i < this.length;) {\n      result[values.get(i)] = counts.get(i);\n    }\n\n    return result;\n  }\n\n}\n/** @ignore */\n\nexport class FilteredDataFrame extends DataFrame {\n  constructor(batches, predicate) {\n    super(batches);\n    this._predicate = predicate;\n  }\n\n  scan(next, bind) {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch);\n\n      let isBound = false; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n\n          next(index, batch);\n        }\n      }\n    }\n  }\n\n  scanReverse(next, bind) {\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch);\n\n      let isBound = false; // yield all indices\n\n      for (let index = batch.length; --index >= 0;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n\n          next(index, batch);\n        }\n      }\n    }\n  }\n\n  count() {\n    // inlined version of this:\n    // let sum = 0;\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) ++sum;\n    // });\n    // return sum;\n    let sum = 0;\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch); // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          ++sum;\n        }\n      }\n    }\n\n    return sum;\n  }\n\n  *[Symbol.iterator]() {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex]; // TODO: bind batches lazily\n      // If predicate doesn't match anything in the batch we don't need\n      // to bind the callback\n\n      const predicate = this._predicate.bind(batch); // yield all indices\n\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          yield batch.get(index);\n        }\n      }\n    }\n  }\n\n  filter(predicate) {\n    return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n  }\n\n  countBy(name) {\n    const batches = this._chunks,\n          numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name; // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n\n      const predicate = this._predicate.bind(batch); // rebind the countBy Col\n\n\n      count_by.bind(batch);\n      const keys = count_by.vector.indices; // yield all indices\n\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n\n        if (key !== null && predicate(index, batch)) {\n          counts[key]++;\n        }\n      }\n    }\n\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Table","IntVector","Field","Schema","Col","RecordBatch","DataType","prototype","countBy","name","DataFrame","chunks","scan","next","bind","scanReverse","filter","predicate","FilteredDataFrame","batches","numBatches","length","batchIndex","batch","index","numRows","count_by","vector","isDictionary","type","Error","countByteLength","Math","ceil","log","CountsArrayType","Uint32Array","Uint16Array","Uint8Array","counts","dictionary","keys","indices","key","get","CountByResult","from","constructor","values","schema","toJSON","getColumnAt","result","i","_predicate","_chunks","isBound","count","sum","Symbol","iterator","and"],"sources":["compute/dataframe.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}