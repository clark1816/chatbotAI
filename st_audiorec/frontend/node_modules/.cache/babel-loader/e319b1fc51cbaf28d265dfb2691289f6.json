{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\n\nexport class BaseVector extends AbstractVector {\n  constructor(data, children) {\n    super();\n    this._children = children;\n    this.numChildren = data.childData.length;\n\n    this._bindDataAccessors(this.data = data);\n  }\n\n  get type() {\n    return this.data.type;\n  }\n\n  get typeId() {\n    return this.data.typeId;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  get offset() {\n    return this.data.offset;\n  }\n\n  get stride() {\n    return this.data.stride;\n  }\n\n  get nullCount() {\n    return this.data.nullCount;\n  }\n\n  get byteLength() {\n    return this.data.byteLength;\n  }\n\n  get VectorName() {\n    return `${Type[this.typeId]}Vector`;\n  }\n\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n\n  get values() {\n    return this.data.values;\n  }\n\n  get typeIds() {\n    return this.data.typeIds;\n  }\n\n  get nullBitmap() {\n    return this.data.nullBitmap;\n  }\n\n  get valueOffsets() {\n    return this.data.valueOffsets;\n  }\n\n  get [Symbol.toStringTag]() {\n    return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`;\n  }\n\n  clone(data) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n    return Vector.new(data, children);\n  }\n\n  concat() {\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n\n    return Chunked.concat(this, ...others);\n  }\n\n  slice(begin, end) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    return clampRange(this, begin, end, this._sliceInternal);\n  }\n\n  isValid(index) {\n    if (this.nullCount > 0) {\n      const idx = this.offset + index;\n      const val = this.nullBitmap[idx >> 3];\n      const mask = val & 1 << idx % 8;\n      return mask !== 0;\n    }\n\n    return true;\n  }\n\n  getChildAt(index) {\n    return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = Vector.new(this.data.childData[index]));\n  }\n\n  toJSON() {\n    return [...this];\n  }\n\n  _sliceInternal(self, begin, end) {\n    return self.clone(self.data.slice(begin, end - begin), null);\n  } // @ts-ignore\n\n\n  _bindDataAccessors(data) {// Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n  }\n\n}\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAASA,IAAT,QAAqB,SAArB;AAEA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA,SAASC,cAAT,EAAyBC,MAAzB,QAAyE,WAAzE;AASA;;AACA,OAAM,MAAgBC,UAAhB,SAA6DF,cAA7D,CAA8E;AAKhFG,cAAYC,IAAZ,EAA2BC,QAA3B,EAA8C;AAC1C;AACA,SAAKC,SAAL,GAAiBD,QAAjB;AACA,SAAKE,WAAL,GAAmBH,IAAI,CAACI,SAAL,CAAeC,MAAlC;;AACA,SAAKC,kBAAL,CAAwB,KAAKN,IAAL,GAAYA,IAApC;AACH;;AAKc,MAAJO,IAAI;AAAK,WAAO,KAAKP,IAAL,CAAUO,IAAjB;AAAwB;;AAC3B,MAANC,MAAM;AAAK,WAAO,KAAKR,IAAL,CAAUQ,MAAjB;AAA0B;;AAC/B,MAANH,MAAM;AAAK,WAAO,KAAKL,IAAL,CAAUK,MAAjB;AAA0B;;AAC/B,MAANI,MAAM;AAAK,WAAO,KAAKT,IAAL,CAAUS,MAAjB;AAA0B;;AAC/B,MAANC,MAAM;AAAK,WAAO,KAAKV,IAAL,CAAUU,MAAjB;AAA0B;;AAC5B,MAATC,SAAS;AAAK,WAAO,KAAKX,IAAL,CAAUW,SAAjB;AAA6B;;AACjC,MAAVC,UAAU;AAAK,WAAO,KAAKZ,IAAL,CAAUY,UAAjB;AAA8B;;AACnC,MAAVC,UAAU;AAAK,WAAO,GAAGpB,IAAI,CAAC,KAAKe,MAAN,CAAa,QAA3B;AAAsC;;AAE5C,MAATM,SAAS;AAAqB,WAAO,KAAKP,IAAL,CAAUO,SAAjB;AAA6B;;AAErD,MAANC,MAAM;AAAK,WAAO,KAAKf,IAAL,CAAUe,MAAjB;AAA0B;;AAC9B,MAAPC,OAAO;AAAK,WAAO,KAAKhB,IAAL,CAAUgB,OAAjB;AAA2B;;AAC7B,MAAVC,UAAU;AAAK,WAAO,KAAKjB,IAAL,CAAUiB,UAAjB;AAA8B;;AACjC,MAAZC,YAAY;AAAK,WAAO,KAAKlB,IAAL,CAAUkB,YAAjB;AAAgC;;AAE9B,OAAlBC,MAAM,CAACC,WAAW,IAAC;AAAK,WAAO,GAAG,KAAKP,UAAU,IAAI,KAAKN,IAAL,CAAUY,MAAM,CAACC,WAAjB,CAA6B,GAA1D;AAAgE;;AAE7FC,OAAK,CAAyBrB,IAAzB,EAAiE;AAAA,QAAzBC,QAAyB,uEAAd,KAAKC,SAAS;AACzE,WAAOL,MAAM,CAACyB,GAAP,CAActB,IAAd,EAAoBC,QAApB,CAAP;AACH;;AAEMsB,QAAM,GAAuB;AAAA,sCAAnBC,MAAmB;AAAnBA,YAAmB;AAAA;;AAChC,WAAO9B,OAAO,CAAC6B,MAAR,CAAkB,IAAlB,EAAwB,GAAGC,MAA3B,CAAP;AACH;;AAEMC,OAAK,CAACC,KAAD,EAAiBC,GAAjB,EAA6B;AACrC;AACA;AACA;AACA,WAAOhC,UAAU,CAAC,IAAD,EAAO+B,KAAP,EAAcC,GAAd,EAAmB,KAAKC,cAAxB,CAAjB;AACH;;AAEMC,SAAO,CAACC,KAAD,EAAc;AACxB,QAAI,KAAKnB,SAAL,GAAiB,CAArB,EAAwB;AACpB,YAAMoB,GAAG,GAAG,KAAKtB,MAAL,GAAcqB,KAA1B;AACA,YAAME,GAAG,GAAG,KAAKf,UAAL,CAAgBc,GAAG,IAAI,CAAvB,CAAZ;AACA,YAAME,IAAI,GAAID,GAAG,GAAI,KAAMD,GAAG,GAAG,CAAjC;AACA,aAAOE,IAAI,KAAK,CAAhB;AACH;;AACD,WAAO,IAAP;AACH;;AAEMC,YAAU,CAA2BJ,KAA3B,EAAwC;AACrD,WAAOA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAK3B,WAA3B,GAAyC,IAAzC,GACH,CAAC,KAAKD,SAAL,KAAmB,KAAKA,SAAL,GAAiB,EAApC,CAAD,EAA0C4B,KAA1C,MACC,KAAK5B,SAAL,CAAe4B,KAAf,IAAwBjC,MAAM,CAACyB,GAAP,CAAc,KAAKtB,IAAL,CAAUI,SAAV,CAAoB0B,KAApB,CAAd,CADzB,CADJ;AAIH;;AAEMK,QAAM;AAAU,WAAO,CAAC,GAAG,IAAJ,CAAP;AAAmB;;AAEhCP,gBAAc,CAACQ,IAAD,EAAaV,KAAb,EAA4BC,GAA5B,EAAuC;AAC3D,WAAOS,IAAI,CAACf,KAAL,CAAWe,IAAI,CAACpC,IAAL,CAAUyB,KAAV,CAAgBC,KAAhB,EAAuBC,GAAG,GAAGD,KAA7B,CAAX,EAAgD,IAAhD,CAAP;AACH,GArE+E,CAuEhF;;;AACUpB,oBAAkB,CAACN,IAAD,EAAc,CACtC;AACH;;AA1E+E;AA6EnFF,UAAU,CAACuC,SAAX,CAA6BlB,MAAM,CAACmB,kBAApC,IAA0D,IAA1D","names":["Type","Chunked","clampRange","AbstractVector","Vector","BaseVector","constructor","data","children","_children","numChildren","childData","length","_bindDataAccessors","type","typeId","offset","stride","nullCount","byteLength","VectorName","ArrayType","values","typeIds","nullBitmap","valueOffsets","Symbol","toStringTag","clone","new","concat","others","slice","begin","end","_sliceInternal","isValid","index","idx","val","mask","getChildAt","toJSON","self","prototype","isConcatSpreadable"],"sources":["vector/base.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n"]},"metadata":{},"sourceType":"module"}