{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n\n  visit() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n\n  getVisitFn(node) {\n    let throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n\n  visitNull(_node) {\n    return null;\n  }\n\n  visitBool(_node) {\n    return null;\n  }\n\n  visitInt(_node) {\n    return null;\n  }\n\n  visitFloat(_node) {\n    return null;\n  }\n\n  visitUtf8(_node) {\n    return null;\n  }\n\n  visitBinary(_node) {\n    return null;\n  }\n\n  visitFixedSizeBinary(_node) {\n    return null;\n  }\n\n  visitDate(_node) {\n    return null;\n  }\n\n  visitTimestamp(_node) {\n    return null;\n  }\n\n  visitTime(_node) {\n    return null;\n  }\n\n  visitDecimal(_node) {\n    return null;\n  }\n\n  visitList(_node) {\n    return null;\n  }\n\n  visitStruct(_node) {\n    return null;\n  }\n\n  visitUnion(_node) {\n    return null;\n  }\n\n  visitDictionary(_node) {\n    return null;\n  }\n\n  visitInterval(_node) {\n    return null;\n  }\n\n  visitFixedSizeList(_node) {\n    return null;\n  }\n\n  visitMap(_node) {\n    return null;\n  }\n\n}\n/** @ignore */\n\nfunction getVisitFn(visitor, node) {\n  let throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let fn = null;\n  let dtype = Type.NONE; // tslint:disable\n\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\n\n\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n\n      return Type.Int;\n\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n\n        case Precision.SINGLE:\n          return Type.Float32;\n\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n\n      return Type.Float;\n\n    case Type.Binary:\n      return Type.Binary;\n\n    case Type.Utf8:\n      return Type.Utf8;\n\n    case Type.Bool:\n      return Type.Bool;\n\n    case Type.Decimal:\n      return Type.Decimal;\n\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n\n      return Type.Time;\n\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n\n      return Type.Timestamp;\n\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n\n      return Type.Date;\n\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n\n      return Type.Interval;\n\n    case Type.Map:\n      return Type.Map;\n\n    case Type.List:\n      return Type.List;\n\n    case Type.Struct:\n      return Type.Struct;\n\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n\n      return Type.Union;\n\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n\n  throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n} // Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n\n\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"mappings":"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","names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","visitMany","nodes","args","map","node","i","visit","x","getVisitFn","apply","throwIfNotFound","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","fn","dtype","NONE","inferDType","type","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}